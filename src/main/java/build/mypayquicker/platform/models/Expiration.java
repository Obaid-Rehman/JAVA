/*
 * PQAPIV2Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package build.mypayquicker.platform.models;

import build.mypayquicker.platform.DateTimeHelper;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDateTime;

/**
 * This is a model class for Expiration type.
 */
public class Expiration {
    private LocalDateTime expires;

    /**
     * Default constructor.
     */
    public Expiration() {
    }

    /**
     * Initialization constructor.
     * @param  expires  LocalDateTime value for expires.
     */
    public Expiration(
            LocalDateTime expires) {
        this.expires = expires;
    }

    /**
     * Getter for Expires.
     * Quote expiration, ISO-8601 format, UTC by default unless overridden.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("expires")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getExpires() {
        return expires;
    }

    /**
     * Setter for Expires.
     * Quote expiration, ISO-8601 format, UTC by default unless overridden.
     * @param expires Value for LocalDateTime
     */
    @JsonSetter("expires")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setExpires(LocalDateTime expires) {
        this.expires = expires;
    }

    /**
     * Converts this Expiration into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Expiration [" + "expires=" + expires + "]";
    }

    /**
     * Builds a new {@link Expiration.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Expiration.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .expires(getExpires());
        return builder;
    }

    /**
     * Class to build instances of {@link Expiration}.
     */
    public static class Builder {
        private LocalDateTime expires;



        /**
         * Setter for expires.
         * @param  expires  LocalDateTime value for expires.
         * @return Builder
         */
        public Builder expires(LocalDateTime expires) {
            this.expires = expires;
            return this;
        }

        /**
         * Builds a new {@link Expiration} object using the set fields.
         * @return {@link Expiration}
         */
        public Expiration build() {
            return new Expiration(expires);
        }
    }
}
