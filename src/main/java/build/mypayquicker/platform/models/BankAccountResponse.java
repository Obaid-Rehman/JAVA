/*
 * PQAPIV2Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package build.mypayquicker.platform.models;

import build.mypayquicker.platform.DateTimeHelper;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDateTime;
import java.util.List;

/**
 * This is a model class for BankAccountResponse type.
 */
public class BankAccountResponse {
    private String token;
    private BankAccountStatusTypesEnum status;
    private LocalDateTime createdOn;
    private BankAccountOwnershipTypesEnum bankAccountOwnershipType;
    private BankAccountTypesEnum type;
    private List<KeyValuePairBankFieldTypesString> fields;
    private CurrencyTypesEnum bankCurrency;
    private CountryTypesEnum bankCountry;
    private String description;
    private List<HaetosParams> links;

    /**
     * Default constructor.
     */
    public BankAccountResponse() {
    }

    /**
     * Initialization constructor.
     * @param  token  String value for token.
     * @param  status  BankAccountStatusTypesEnum value for status.
     * @param  createdOn  LocalDateTime value for createdOn.
     * @param  bankAccountOwnershipType  BankAccountOwnershipTypesEnum value for
     *         bankAccountOwnershipType.
     * @param  type  BankAccountTypesEnum value for type.
     * @param  fields  List of KeyValuePairBankFieldTypesString value for fields.
     * @param  bankCurrency  CurrencyTypesEnum value for bankCurrency.
     * @param  bankCountry  CountryTypesEnum value for bankCountry.
     * @param  description  String value for description.
     * @param  links  List of HaetosParams value for links.
     */
    public BankAccountResponse(
            String token,
            BankAccountStatusTypesEnum status,
            LocalDateTime createdOn,
            BankAccountOwnershipTypesEnum bankAccountOwnershipType,
            BankAccountTypesEnum type,
            List<KeyValuePairBankFieldTypesString> fields,
            CurrencyTypesEnum bankCurrency,
            CountryTypesEnum bankCountry,
            String description,
            List<HaetosParams> links) {
        this.token = token;
        this.status = status;
        this.createdOn = createdOn;
        this.bankAccountOwnershipType = bankAccountOwnershipType;
        this.type = type;
        this.fields = fields;
        this.bankCurrency = bankCurrency;
        this.bankCountry = bankCountry;
        this.description = description;
        this.links = links;
    }

    /**
     * Getter for Token.
     * Token representing the resource, prefixed with &lt;i&gt;user-&lt;/i&gt;, &lt;i&gt;dest-&lt;/i&gt;, &lt;i&gt;xfer-&lt;/i&gt;,
     * &lt;i&gt;acct-&lt;/i&gt;, &lt;i&gt;pmnt-&lt;/i&gt;, or &lt;i&gt;docu-&lt;/i&gt;.
     * @return Returns the String
     */
    @JsonGetter("token")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getToken() {
        return token;
    }

    /**
     * Setter for Token.
     * Token representing the resource, prefixed with &lt;i&gt;user-&lt;/i&gt;, &lt;i&gt;dest-&lt;/i&gt;, &lt;i&gt;xfer-&lt;/i&gt;,
     * &lt;i&gt;acct-&lt;/i&gt;, &lt;i&gt;pmnt-&lt;/i&gt;, or &lt;i&gt;docu-&lt;/i&gt;.
     * @param token Value for String
     */
    @JsonSetter("token")
    public void setToken(String token) {
        this.token = token;
    }

    /**
     * Getter for Status.
     * Current verification status type of the bank account
     * @return Returns the BankAccountStatusTypesEnum
     */
    @JsonGetter("status")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public BankAccountStatusTypesEnum getStatus() {
        return status;
    }

    /**
     * Setter for Status.
     * Current verification status type of the bank account
     * @param status Value for BankAccountStatusTypesEnum
     */
    @JsonSetter("status")
    public void setStatus(BankAccountStatusTypesEnum status) {
        this.status = status;
    }

    /**
     * Getter for CreatedOn.
     * Time at which the object was created.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("createdOn")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreatedOn() {
        return createdOn;
    }

    /**
     * Setter for CreatedOn.
     * Time at which the object was created.
     * @param createdOn Value for LocalDateTime
     */
    @JsonSetter("createdOn")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedOn(LocalDateTime createdOn) {
        this.createdOn = createdOn;
    }

    /**
     * Getter for BankAccountOwnershipType.
     * Account ownership types
     * @return Returns the BankAccountOwnershipTypesEnum
     */
    @JsonGetter("bankAccountOwnershipType")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public BankAccountOwnershipTypesEnum getBankAccountOwnershipType() {
        return bankAccountOwnershipType;
    }

    /**
     * Setter for BankAccountOwnershipType.
     * Account ownership types
     * @param bankAccountOwnershipType Value for BankAccountOwnershipTypesEnum
     */
    @JsonSetter("bankAccountOwnershipType")
    public void setBankAccountOwnershipType(BankAccountOwnershipTypesEnum bankAccountOwnershipType) {
        this.bankAccountOwnershipType = bankAccountOwnershipType;
    }

    /**
     * Getter for Type.
     * Financial purpose of the bank account (&lt;i&gt;Savings&lt;/i&gt;, &lt;i&gt;Investment&lt;/i&gt;)
     * @return Returns the BankAccountTypesEnum
     */
    @JsonGetter("type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public BankAccountTypesEnum getType() {
        return type;
    }

    /**
     * Setter for Type.
     * Financial purpose of the bank account (&lt;i&gt;Savings&lt;/i&gt;, &lt;i&gt;Investment&lt;/i&gt;)
     * @param type Value for BankAccountTypesEnum
     */
    @JsonSetter("type")
    public void setType(BankAccountTypesEnum type) {
        this.type = type;
    }

    /**
     * Getter for Fields.
     * @return Returns the List of KeyValuePairBankFieldTypesString
     */
    @JsonGetter("fields")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<KeyValuePairBankFieldTypesString> getFields() {
        return fields;
    }

    /**
     * Setter for Fields.
     * @param fields Value for List of KeyValuePairBankFieldTypesString
     */
    @JsonSetter("fields")
    public void setFields(List<KeyValuePairBankFieldTypesString> fields) {
        this.fields = fields;
    }

    /**
     * Getter for BankCurrency.
     * Currency code type for the object
     * @return Returns the CurrencyTypesEnum
     */
    @JsonGetter("bankCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public CurrencyTypesEnum getBankCurrency() {
        return bankCurrency;
    }

    /**
     * Setter for BankCurrency.
     * Currency code type for the object
     * @param bankCurrency Value for CurrencyTypesEnum
     */
    @JsonSetter("bankCurrency")
    public void setBankCurrency(CurrencyTypesEnum bankCurrency) {
        this.bankCurrency = bankCurrency;
    }

    /**
     * Getter for BankCountry.
     * Two-digit country code types
     * @return Returns the CountryTypesEnum
     */
    @JsonGetter("bankCountry")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public CountryTypesEnum getBankCountry() {
        return bankCountry;
    }

    /**
     * Setter for BankCountry.
     * Two-digit country code types
     * @param bankCountry Value for CountryTypesEnum
     */
    @JsonSetter("bankCountry")
    public void setBankCountry(CountryTypesEnum bankCountry) {
        this.bankCountry = bankCountry;
    }

    /**
     * Getter for Description.
     * User-supplied description of the bank account for reference
     * @return Returns the String
     */
    @JsonGetter("description")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getDescription() {
        return description;
    }

    /**
     * Setter for Description.
     * User-supplied description of the bank account for reference
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Getter for Links.
     * @return Returns the List of HaetosParams
     */
    @JsonGetter("links")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<HaetosParams> getLinks() {
        return links;
    }

    /**
     * Setter for Links.
     * @param links Value for List of HaetosParams
     */
    @JsonSetter("links")
    public void setLinks(List<HaetosParams> links) {
        this.links = links;
    }

    /**
     * Converts this BankAccountResponse into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "BankAccountResponse [" + "token=" + token + ", status=" + status + ", createdOn="
                + createdOn + ", bankAccountOwnershipType=" + bankAccountOwnershipType + ", type="
                + type + ", fields=" + fields + ", bankCurrency=" + bankCurrency + ", bankCountry="
                + bankCountry + ", description=" + description + ", links=" + links + "]";
    }

    /**
     * Builds a new {@link BankAccountResponse.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link BankAccountResponse.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .token(getToken())
                .status(getStatus())
                .createdOn(getCreatedOn())
                .bankAccountOwnershipType(getBankAccountOwnershipType())
                .type(getType())
                .fields(getFields())
                .bankCurrency(getBankCurrency())
                .bankCountry(getBankCountry())
                .description(getDescription())
                .links(getLinks());
        return builder;
    }

    /**
     * Class to build instances of {@link BankAccountResponse}.
     */
    public static class Builder {
        private String token;
        private BankAccountStatusTypesEnum status;
        private LocalDateTime createdOn;
        private BankAccountOwnershipTypesEnum bankAccountOwnershipType;
        private BankAccountTypesEnum type;
        private List<KeyValuePairBankFieldTypesString> fields;
        private CurrencyTypesEnum bankCurrency;
        private CountryTypesEnum bankCountry;
        private String description;
        private List<HaetosParams> links;



        /**
         * Setter for token.
         * @param  token  String value for token.
         * @return Builder
         */
        public Builder token(String token) {
            this.token = token;
            return this;
        }

        /**
         * Setter for status.
         * @param  status  BankAccountStatusTypesEnum value for status.
         * @return Builder
         */
        public Builder status(BankAccountStatusTypesEnum status) {
            this.status = status;
            return this;
        }

        /**
         * Setter for createdOn.
         * @param  createdOn  LocalDateTime value for createdOn.
         * @return Builder
         */
        public Builder createdOn(LocalDateTime createdOn) {
            this.createdOn = createdOn;
            return this;
        }

        /**
         * Setter for bankAccountOwnershipType.
         * @param  bankAccountOwnershipType  BankAccountOwnershipTypesEnum value for
         *         bankAccountOwnershipType.
         * @return Builder
         */
        public Builder bankAccountOwnershipType(
                BankAccountOwnershipTypesEnum bankAccountOwnershipType) {
            this.bankAccountOwnershipType = bankAccountOwnershipType;
            return this;
        }

        /**
         * Setter for type.
         * @param  type  BankAccountTypesEnum value for type.
         * @return Builder
         */
        public Builder type(BankAccountTypesEnum type) {
            this.type = type;
            return this;
        }

        /**
         * Setter for fields.
         * @param  fields  List of KeyValuePairBankFieldTypesString value for fields.
         * @return Builder
         */
        public Builder fields(List<KeyValuePairBankFieldTypesString> fields) {
            this.fields = fields;
            return this;
        }

        /**
         * Setter for bankCurrency.
         * @param  bankCurrency  CurrencyTypesEnum value for bankCurrency.
         * @return Builder
         */
        public Builder bankCurrency(CurrencyTypesEnum bankCurrency) {
            this.bankCurrency = bankCurrency;
            return this;
        }

        /**
         * Setter for bankCountry.
         * @param  bankCountry  CountryTypesEnum value for bankCountry.
         * @return Builder
         */
        public Builder bankCountry(CountryTypesEnum bankCountry) {
            this.bankCountry = bankCountry;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = description;
            return this;
        }

        /**
         * Setter for links.
         * @param  links  List of HaetosParams value for links.
         * @return Builder
         */
        public Builder links(List<HaetosParams> links) {
            this.links = links;
            return this;
        }

        /**
         * Builds a new {@link BankAccountResponse} object using the set fields.
         * @return {@link BankAccountResponse}
         */
        public BankAccountResponse build() {
            return new BankAccountResponse(token, status, createdOn, bankAccountOwnershipType, type,
                    fields, bankCurrency, bankCountry, description, links);
        }
    }
}
