/*
 * PQAPIV2Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package build.mypayquicker.platform.models;

import build.mypayquicker.platform.DateTimeHelper;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDateTime;

/**
 * This is a model class for NotBeforeOrAfter type.
 */
public class NotBeforeOrAfter {
    private LocalDateTime notBefore;
    private LocalDateTime notAfter;

    /**
     * Default constructor.
     */
    public NotBeforeOrAfter() {
    }

    /**
     * Initialization constructor.
     * @param  notBefore  LocalDateTime value for notBefore.
     * @param  notAfter  LocalDateTime value for notAfter.
     */
    public NotBeforeOrAfter(
            LocalDateTime notBefore,
            LocalDateTime notAfter) {
        this.notBefore = notBefore;
        this.notAfter = notAfter;
    }

    /**
     * Getter for NotBefore.
     * Transfer is scheduled and will not process before this time.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("notBefore")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getNotBefore() {
        return notBefore;
    }

    /**
     * Setter for NotBefore.
     * Transfer is scheduled and will not process before this time.
     * @param notBefore Value for LocalDateTime
     */
    @JsonSetter("notBefore")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setNotBefore(LocalDateTime notBefore) {
        this.notBefore = notBefore;
    }

    /**
     * Getter for NotAfter.
     * Transfer expires if not completed prior to this time.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("notAfter")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getNotAfter() {
        return notAfter;
    }

    /**
     * Setter for NotAfter.
     * Transfer expires if not completed prior to this time.
     * @param notAfter Value for LocalDateTime
     */
    @JsonSetter("notAfter")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setNotAfter(LocalDateTime notAfter) {
        this.notAfter = notAfter;
    }

    /**
     * Converts this NotBeforeOrAfter into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "NotBeforeOrAfter [" + "notBefore=" + notBefore + ", notAfter=" + notAfter + "]";
    }

    /**
     * Builds a new {@link NotBeforeOrAfter.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link NotBeforeOrAfter.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .notBefore(getNotBefore())
                .notAfter(getNotAfter());
        return builder;
    }

    /**
     * Class to build instances of {@link NotBeforeOrAfter}.
     */
    public static class Builder {
        private LocalDateTime notBefore;
        private LocalDateTime notAfter;



        /**
         * Setter for notBefore.
         * @param  notBefore  LocalDateTime value for notBefore.
         * @return Builder
         */
        public Builder notBefore(LocalDateTime notBefore) {
            this.notBefore = notBefore;
            return this;
        }

        /**
         * Setter for notAfter.
         * @param  notAfter  LocalDateTime value for notAfter.
         * @return Builder
         */
        public Builder notAfter(LocalDateTime notAfter) {
            this.notAfter = notAfter;
            return this;
        }

        /**
         * Builds a new {@link NotBeforeOrAfter} object using the set fields.
         * @return {@link NotBeforeOrAfter}
         */
        public NotBeforeOrAfter build() {
            return new NotBeforeOrAfter(notBefore, notAfter);
        }
    }
}
