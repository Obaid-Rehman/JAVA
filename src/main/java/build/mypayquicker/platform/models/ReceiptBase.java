/*
 * PQAPIV2Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package build.mypayquicker.platform.models;

import build.mypayquicker.platform.DateTimeHelper;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDateTime;

/**
 * This is a model class for ReceiptBase type.
 */
public class ReceiptBase {
    private String formattedAmount;
    private double amount;
    private CurrencyTypesEnum currency;
    private String sourceToken;
    private String destinationToken;
    private LocalDateTime createdOn;
    private String token;
    private TransferStatusTypesEnum status;

    /**
     * Default constructor.
     */
    public ReceiptBase() {
    }

    /**
     * Initialization constructor.
     * @param  amount  double value for amount.
     * @param  currency  CurrencyTypesEnum value for currency.
     * @param  formattedAmount  String value for formattedAmount.
     * @param  sourceToken  String value for sourceToken.
     * @param  destinationToken  String value for destinationToken.
     * @param  createdOn  LocalDateTime value for createdOn.
     * @param  token  String value for token.
     * @param  status  TransferStatusTypesEnum value for status.
     */
    public ReceiptBase(
            double amount,
            CurrencyTypesEnum currency,
            String formattedAmount,
            String sourceToken,
            String destinationToken,
            LocalDateTime createdOn,
            String token,
            TransferStatusTypesEnum status) {
        this.formattedAmount = formattedAmount;
        this.amount = amount;
        this.currency = currency;
        this.sourceToken = sourceToken;
        this.destinationToken = destinationToken;
        this.createdOn = createdOn;
        this.token = token;
        this.status = status;
    }

    /**
     * Getter for FormattedAmount.
     * Formatted monetary amount
     * @return Returns the String
     */
    @JsonGetter("formattedAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getFormattedAmount() {
        return formattedAmount;
    }

    /**
     * Setter for FormattedAmount.
     * Formatted monetary amount
     * @param formattedAmount Value for String
     */
    @JsonSetter("formattedAmount")
    public void setFormattedAmount(String formattedAmount) {
        this.formattedAmount = formattedAmount;
    }

    /**
     * Getter for Amount.
     * Amount of the transfer in the specified currency.
     * @return Returns the double
     */
    @JsonGetter("amount")
    public double getAmount() {
        return amount;
    }

    /**
     * Setter for Amount.
     * Amount of the transfer in the specified currency.
     * @param amount Value for double
     */
    @JsonSetter("amount")
    public void setAmount(double amount) {
        this.amount = amount;
    }

    /**
     * Getter for Currency.
     * Currency code type for the object
     * @return Returns the CurrencyTypesEnum
     */
    @JsonGetter("currency")
    public CurrencyTypesEnum getCurrency() {
        return currency;
    }

    /**
     * Setter for Currency.
     * Currency code type for the object
     * @param currency Value for CurrencyTypesEnum
     */
    @JsonSetter("currency")
    public void setCurrency(CurrencyTypesEnum currency) {
        this.currency = currency;
    }

    /**
     * Getter for SourceToken.
     * Unique identifier representing the source of funds.
     * @return Returns the String
     */
    @JsonGetter("sourceToken")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getSourceToken() {
        return sourceToken;
    }

    /**
     * Setter for SourceToken.
     * Unique identifier representing the source of funds.
     * @param sourceToken Value for String
     */
    @JsonSetter("sourceToken")
    public void setSourceToken(String sourceToken) {
        this.sourceToken = sourceToken;
    }

    /**
     * Getter for DestinationToken.
     * Unique identifier representing the destination of funds.
     * @return Returns the String
     */
    @JsonGetter("destinationToken")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getDestinationToken() {
        return destinationToken;
    }

    /**
     * Setter for DestinationToken.
     * Unique identifier representing the destination of funds.
     * @param destinationToken Value for String
     */
    @JsonSetter("destinationToken")
    public void setDestinationToken(String destinationToken) {
        this.destinationToken = destinationToken;
    }

    /**
     * Getter for CreatedOn.
     * Time at which the object was created.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("createdOn")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreatedOn() {
        return createdOn;
    }

    /**
     * Setter for CreatedOn.
     * Time at which the object was created.
     * @param createdOn Value for LocalDateTime
     */
    @JsonSetter("createdOn")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedOn(LocalDateTime createdOn) {
        this.createdOn = createdOn;
    }

    /**
     * Getter for Token.
     * Token representing the resource, prefixed with &lt;i&gt;user-&lt;/i&gt;, &lt;i&gt;dest-&lt;/i&gt;, &lt;i&gt;xfer-&lt;/i&gt;,
     * &lt;i&gt;acct-&lt;/i&gt;, &lt;i&gt;pmnt-&lt;/i&gt;, or &lt;i&gt;docu-&lt;/i&gt;.
     * @return Returns the String
     */
    @JsonGetter("token")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getToken() {
        return token;
    }

    /**
     * Setter for Token.
     * Token representing the resource, prefixed with &lt;i&gt;user-&lt;/i&gt;, &lt;i&gt;dest-&lt;/i&gt;, &lt;i&gt;xfer-&lt;/i&gt;,
     * &lt;i&gt;acct-&lt;/i&gt;, &lt;i&gt;pmnt-&lt;/i&gt;, or &lt;i&gt;docu-&lt;/i&gt;.
     * @param token Value for String
     */
    @JsonSetter("token")
    public void setToken(String token) {
        this.token = token;
    }

    /**
     * Getter for Status.
     * Current status of a transfer
     * @return Returns the TransferStatusTypesEnum
     */
    @JsonGetter("status")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public TransferStatusTypesEnum getStatus() {
        return status;
    }

    /**
     * Setter for Status.
     * Current status of a transfer
     * @param status Value for TransferStatusTypesEnum
     */
    @JsonSetter("status")
    public void setStatus(TransferStatusTypesEnum status) {
        this.status = status;
    }

    /**
     * Converts this ReceiptBase into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ReceiptBase [" + "amount=" + amount + ", currency=" + currency
                + ", formattedAmount=" + formattedAmount + ", sourceToken=" + sourceToken
                + ", destinationToken=" + destinationToken + ", createdOn=" + createdOn + ", token="
                + token + ", status=" + status + "]";
    }

    /**
     * Builds a new {@link ReceiptBase.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link ReceiptBase.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(amount, currency)
                .formattedAmount(getFormattedAmount())
                .sourceToken(getSourceToken())
                .destinationToken(getDestinationToken())
                .createdOn(getCreatedOn())
                .token(getToken())
                .status(getStatus());
        return builder;
    }

    /**
     * Class to build instances of {@link ReceiptBase}.
     */
    public static class Builder {
        private double amount;
        private CurrencyTypesEnum currency;
        private String formattedAmount;
        private String sourceToken;
        private String destinationToken;
        private LocalDateTime createdOn;
        private String token;
        private TransferStatusTypesEnum status;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  amount  double value for amount.
         * @param  currency  CurrencyTypesEnum value for currency.
         */
        public Builder(double amount, CurrencyTypesEnum currency) {
            this.amount = amount;
            this.currency = currency;
        }

        /**
         * Setter for amount.
         * @param  amount  double value for amount.
         * @return Builder
         */
        public Builder amount(double amount) {
            this.amount = amount;
            return this;
        }

        /**
         * Setter for currency.
         * @param  currency  CurrencyTypesEnum value for currency.
         * @return Builder
         */
        public Builder currency(CurrencyTypesEnum currency) {
            this.currency = currency;
            return this;
        }

        /**
         * Setter for formattedAmount.
         * @param  formattedAmount  String value for formattedAmount.
         * @return Builder
         */
        public Builder formattedAmount(String formattedAmount) {
            this.formattedAmount = formattedAmount;
            return this;
        }

        /**
         * Setter for sourceToken.
         * @param  sourceToken  String value for sourceToken.
         * @return Builder
         */
        public Builder sourceToken(String sourceToken) {
            this.sourceToken = sourceToken;
            return this;
        }

        /**
         * Setter for destinationToken.
         * @param  destinationToken  String value for destinationToken.
         * @return Builder
         */
        public Builder destinationToken(String destinationToken) {
            this.destinationToken = destinationToken;
            return this;
        }

        /**
         * Setter for createdOn.
         * @param  createdOn  LocalDateTime value for createdOn.
         * @return Builder
         */
        public Builder createdOn(LocalDateTime createdOn) {
            this.createdOn = createdOn;
            return this;
        }

        /**
         * Setter for token.
         * @param  token  String value for token.
         * @return Builder
         */
        public Builder token(String token) {
            this.token = token;
            return this;
        }

        /**
         * Setter for status.
         * @param  status  TransferStatusTypesEnum value for status.
         * @return Builder
         */
        public Builder status(TransferStatusTypesEnum status) {
            this.status = status;
            return this;
        }

        /**
         * Builds a new {@link ReceiptBase} object using the set fields.
         * @return {@link ReceiptBase}
         */
        public ReceiptBase build() {
            return new ReceiptBase(amount, currency, formattedAmount, sourceToken, destinationToken,
                    createdOn, token, status);
        }
    }
}
