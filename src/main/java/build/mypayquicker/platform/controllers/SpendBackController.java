/*
 * PQAPIV2Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package build.mypayquicker.platform.controllers;

import build.mypayquicker.platform.ApiHelper;
import build.mypayquicker.platform.AuthManager;
import build.mypayquicker.platform.Configuration;
import build.mypayquicker.platform.exceptions.ApiException;
import build.mypayquicker.platform.http.Headers;
import build.mypayquicker.platform.http.client.HttpCallback;
import build.mypayquicker.platform.http.client.HttpClient;
import build.mypayquicker.platform.http.client.HttpContext;
import build.mypayquicker.platform.http.request.HttpRequest;
import build.mypayquicker.platform.http.response.HttpResponse;
import build.mypayquicker.platform.http.response.HttpStringResponse;
import build.mypayquicker.platform.models.LanguageTypesEnum;
import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.IOException;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * This class lists all the endpoints of the groups.
 */
public final class SpendBackController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public SpendBackController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public SpendBackController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * Retrieve a single spendback quote using the spendback token.
     * @param  spndToken  Required parameter: Auto-generated unique identifier representing an
     *         individual spendback transaction and quote, prefixed with &lt;i&gt;spnd-&lt;/i&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @param  page  Optional parameter: Page number of specific page to return
     * @param  pageSize  Optional parameter: Number of items to be displayed per page
     * @param  filter  Optional parameter: Filter request results by specific criteria.
     * @param  sort  Optional parameter: Sort request results by specific attribute.
     * @param  language  Optional parameter: Filter results by language type.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void retrieveSpendback(
            final String spndToken,
            final String xMyPayQuickerVersion,
            final Integer page,
            final Integer pageSize,
            final String filter,
            final String sort,
            final LanguageTypesEnum language) throws ApiException, IOException {
        HttpRequest request = buildRetrieveSpendbackRequest(spndToken, xMyPayQuickerVersion, page,
                pageSize, filter, sort, language);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        handleRetrieveSpendbackResponse(context);
    }

    /**
     * Retrieve a single spendback quote using the spendback token.
     * @param  spndToken  Required parameter: Auto-generated unique identifier representing an
     *         individual spendback transaction and quote, prefixed with &lt;i&gt;spnd-&lt;/i&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @param  page  Optional parameter: Page number of specific page to return
     * @param  pageSize  Optional parameter: Number of items to be displayed per page
     * @param  filter  Optional parameter: Filter request results by specific criteria.
     * @param  sort  Optional parameter: Sort request results by specific attribute.
     * @param  language  Optional parameter: Filter results by language type.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> retrieveSpendbackAsync(
            final String spndToken,
            final String xMyPayQuickerVersion,
            final Integer page,
            final Integer pageSize,
            final String filter,
            final String sort,
            final LanguageTypesEnum language) {
        return makeHttpCallAsync(() -> buildRetrieveSpendbackRequest(spndToken,
                xMyPayQuickerVersion, page, pageSize, filter, sort, language),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleRetrieveSpendbackResponse(context));
    }

    /**
     * Builds the HttpRequest object for retrieveSpendback.
     */
    private HttpRequest buildRetrieveSpendbackRequest(
            final String spndToken,
            final String xMyPayQuickerVersion,
            final Integer page,
            final Integer pageSize,
            final String filter,
            final String sort,
            final LanguageTypesEnum language) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/spend-back/{spnd-token}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("spnd-token",
                new SimpleEntry<Object, Boolean>(spndToken, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("page", page);
        queryParameters.put("pageSize",
                (pageSize != null) ? pageSize : 20);
        queryParameters.put("filter", filter);
        queryParameters.put("sort", sort);
        queryParameters.put("language",
                (language != null) ? language.value() : null);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("X-MyPayQuicker-Version", xMyPayQuickerVersion);
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for retrieveSpendback.
     * @return An object of type void
     */
    private Void handleRetrieveSpendbackResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        return null;
    }

    /**
     * Accept an open spendback quote.
     * @param  spndToken  Required parameter: Auto-generated unique identifier representing an
     *         individual spendback transaction and quote, prefixed with &lt;i&gt;spnd-&lt;/i&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void acceptSpendbackQuote(
            final String spndToken,
            final String xMyPayQuickerVersion) throws ApiException, IOException {
        HttpRequest request = buildAcceptSpendbackQuoteRequest(spndToken, xMyPayQuickerVersion);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        handleAcceptSpendbackQuoteResponse(context);
    }

    /**
     * Accept an open spendback quote.
     * @param  spndToken  Required parameter: Auto-generated unique identifier representing an
     *         individual spendback transaction and quote, prefixed with &lt;i&gt;spnd-&lt;/i&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> acceptSpendbackQuoteAsync(
            final String spndToken,
            final String xMyPayQuickerVersion) {
        return makeHttpCallAsync(() -> buildAcceptSpendbackQuoteRequest(spndToken,
                xMyPayQuickerVersion),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleAcceptSpendbackQuoteResponse(context));
    }

    /**
     * Builds the HttpRequest object for acceptSpendbackQuote.
     */
    private HttpRequest buildAcceptSpendbackQuoteRequest(
            final String spndToken,
            final String xMyPayQuickerVersion) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/spend-back/{spnd-token}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("spnd-token",
                new SimpleEntry<Object, Boolean>(spndToken, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("X-MyPayQuicker-Version", xMyPayQuickerVersion);
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().post(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for acceptSpendbackQuote.
     * @return An object of type void
     */
    private Void handleAcceptSpendbackQuoteResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        return null;
    }

    /**
     * Cancel an open spendback quote.
     * @param  spndToken  Required parameter: Auto-generated unique identifier representing an
     *         individual spendback transaction and quote, prefixed with &lt;i&gt;spnd-&lt;/i&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void cancelSpendbackQuote(
            final String spndToken,
            final String xMyPayQuickerVersion) throws ApiException, IOException {
        HttpRequest request = buildCancelSpendbackQuoteRequest(spndToken, xMyPayQuickerVersion);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        handleCancelSpendbackQuoteResponse(context);
    }

    /**
     * Cancel an open spendback quote.
     * @param  spndToken  Required parameter: Auto-generated unique identifier representing an
     *         individual spendback transaction and quote, prefixed with &lt;i&gt;spnd-&lt;/i&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> cancelSpendbackQuoteAsync(
            final String spndToken,
            final String xMyPayQuickerVersion) {
        return makeHttpCallAsync(() -> buildCancelSpendbackQuoteRequest(spndToken,
                xMyPayQuickerVersion),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleCancelSpendbackQuoteResponse(context));
    }

    /**
     * Builds the HttpRequest object for cancelSpendbackQuote.
     */
    private HttpRequest buildCancelSpendbackQuoteRequest(
            final String spndToken,
            final String xMyPayQuickerVersion) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/spend-back/{spnd-token}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("spnd-token",
                new SimpleEntry<Object, Boolean>(spndToken, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("X-MyPayQuicker-Version", xMyPayQuickerVersion);
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().delete(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for cancelSpendbackQuote.
     * @return An object of type void
     */
    private Void handleCancelSpendbackQuoteResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        return null;
    }

    /**
     * Perform a spendback refund for the full amount.
     * @param  spndToken  Required parameter: Auto-generated unique identifier representing an
     *         individual spendback transaction and quote, prefixed with &lt;i&gt;spnd-&lt;/i&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void refundSpendbackFull(
            final String spndToken,
            final String xMyPayQuickerVersion) throws ApiException, IOException {
        HttpRequest request = buildRefundSpendbackFullRequest(spndToken, xMyPayQuickerVersion);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        handleRefundSpendbackFullResponse(context);
    }

    /**
     * Perform a spendback refund for the full amount.
     * @param  spndToken  Required parameter: Auto-generated unique identifier representing an
     *         individual spendback transaction and quote, prefixed with &lt;i&gt;spnd-&lt;/i&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> refundSpendbackFullAsync(
            final String spndToken,
            final String xMyPayQuickerVersion) {
        return makeHttpCallAsync(() -> buildRefundSpendbackFullRequest(spndToken,
                xMyPayQuickerVersion),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleRefundSpendbackFullResponse(context));
    }

    /**
     * Builds the HttpRequest object for refundSpendbackFull.
     */
    private HttpRequest buildRefundSpendbackFullRequest(
            final String spndToken,
            final String xMyPayQuickerVersion) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/spend-back/{spnd-token}/refund");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("spnd-token",
                new SimpleEntry<Object, Boolean>(spndToken, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("X-MyPayQuicker-Version", xMyPayQuickerVersion);
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().put(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for refundSpendbackFull.
     * @return An object of type void
     */
    private Void handleRefundSpendbackFullResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        return null;
    }

    /**
     * Perform a spendback refund for a partial amount.
     * @param  spndToken  Required parameter: Auto-generated unique identifier representing an
     *         individual spendback transaction and quote, prefixed with &lt;i&gt;spnd-&lt;/i&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void refundSpendbackPartial(
            final String spndToken,
            final String xMyPayQuickerVersion) throws ApiException, IOException {
        HttpRequest request = buildRefundSpendbackPartialRequest(spndToken, xMyPayQuickerVersion);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        handleRefundSpendbackPartialResponse(context);
    }

    /**
     * Perform a spendback refund for a partial amount.
     * @param  spndToken  Required parameter: Auto-generated unique identifier representing an
     *         individual spendback transaction and quote, prefixed with &lt;i&gt;spnd-&lt;/i&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> refundSpendbackPartialAsync(
            final String spndToken,
            final String xMyPayQuickerVersion) {
        return makeHttpCallAsync(() -> buildRefundSpendbackPartialRequest(spndToken,
                xMyPayQuickerVersion),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleRefundSpendbackPartialResponse(context));
    }

    /**
     * Builds the HttpRequest object for refundSpendbackPartial.
     */
    private HttpRequest buildRefundSpendbackPartialRequest(
            final String spndToken,
            final String xMyPayQuickerVersion) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/spend-back/{spnd-token}/refund");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("spnd-token",
                new SimpleEntry<Object, Boolean>(spndToken, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("X-MyPayQuicker-Version", xMyPayQuickerVersion);
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().patch(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for refundSpendbackPartial.
     * @return An object of type void
     */
    private Void handleRefundSpendbackPartialResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        return null;
    }

    /**
     * Retrieve a list of all spendbacks that supports filtering, sorting, and pagination through
     * existing mechanisms.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @param  page  Optional parameter: Page number of specific page to return
     * @param  pageSize  Optional parameter: Number of items to be displayed per page
     * @param  filter  Optional parameter: Filter request results by specific criteria.
     * @param  sort  Optional parameter: Sort request results by specific attribute.
     * @param  language  Optional parameter: Filter results by language type.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void listSpendBacks(
            final String xMyPayQuickerVersion,
            final Integer page,
            final Integer pageSize,
            final String filter,
            final String sort,
            final LanguageTypesEnum language) throws ApiException, IOException {
        HttpRequest request = buildListSpendBacksRequest(xMyPayQuickerVersion, page, pageSize,
                filter, sort, language);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        handleListSpendBacksResponse(context);
    }

    /**
     * Retrieve a list of all spendbacks that supports filtering, sorting, and pagination through
     * existing mechanisms.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @param  page  Optional parameter: Page number of specific page to return
     * @param  pageSize  Optional parameter: Number of items to be displayed per page
     * @param  filter  Optional parameter: Filter request results by specific criteria.
     * @param  sort  Optional parameter: Sort request results by specific attribute.
     * @param  language  Optional parameter: Filter results by language type.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> listSpendBacksAsync(
            final String xMyPayQuickerVersion,
            final Integer page,
            final Integer pageSize,
            final String filter,
            final String sort,
            final LanguageTypesEnum language) {
        return makeHttpCallAsync(() -> buildListSpendBacksRequest(xMyPayQuickerVersion, page,
                pageSize, filter, sort, language),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleListSpendBacksResponse(context));
    }

    /**
     * Builds the HttpRequest object for listSpendBacks.
     */
    private HttpRequest buildListSpendBacksRequest(
            final String xMyPayQuickerVersion,
            final Integer page,
            final Integer pageSize,
            final String filter,
            final String sort,
            final LanguageTypesEnum language) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/spend-back");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("page", page);
        queryParameters.put("pageSize",
                (pageSize != null) ? pageSize : 20);
        queryParameters.put("filter", filter);
        queryParameters.put("sort", sort);
        queryParameters.put("language",
                (language != null) ? language.value() : null);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("X-MyPayQuicker-Version", xMyPayQuickerVersion);
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for listSpendBacks.
     * @return An object of type void
     */
    private Void handleListSpendBacksResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        return null;
    }

    /**
     * Create a spendback quote. &lt;i&gt;*Spendbacks can be automatically accepted by setting the
     * `autoAcceptQuote` flag. If not automatically accepted, a POST is required to the spendback
     * endpoint using the token returned in the response. Quotes can be accepted, cancelled, or
     * allowed to expire.&lt;/i&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @param  body  Optional parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void quoteSpendback(
            final String xMyPayQuickerVersion,
            final Object body) throws ApiException, IOException {
        HttpRequest request = buildQuoteSpendbackRequest(xMyPayQuickerVersion, body);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        handleQuoteSpendbackResponse(context);
    }

    /**
     * Create a spendback quote. &lt;i&gt;*Spendbacks can be automatically accepted by setting the
     * `autoAcceptQuote` flag. If not automatically accepted, a POST is required to the spendback
     * endpoint using the token returned in the response. Quotes can be accepted, cancelled, or
     * allowed to expire.&lt;/i&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @param  body  Optional parameter: Example:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> quoteSpendbackAsync(
            final String xMyPayQuickerVersion,
            final Object body) {
        return makeHttpCallAsync(() -> buildQuoteSpendbackRequest(xMyPayQuickerVersion, body),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleQuoteSpendbackResponse(context));
    }

    /**
     * Builds the HttpRequest object for quoteSpendback.
     */
    private HttpRequest buildQuoteSpendbackRequest(
            final String xMyPayQuickerVersion,
            final Object body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/spend-back");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("X-MyPayQuicker-Version", xMyPayQuickerVersion);
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for quoteSpendback.
     * @return An object of type void
     */
    private Void handleQuoteSpendbackResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        return null;
    }

}