/*
 * PQAPIV2Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package build.mypayquicker.platform.controllers;

import build.mypayquicker.platform.ApiHelper;
import build.mypayquicker.platform.AuthManager;
import build.mypayquicker.platform.Configuration;
import build.mypayquicker.platform.exceptions.ApiException;
import build.mypayquicker.platform.http.Headers;
import build.mypayquicker.platform.http.client.HttpCallback;
import build.mypayquicker.platform.http.client.HttpClient;
import build.mypayquicker.platform.http.client.HttpContext;
import build.mypayquicker.platform.http.request.HttpRequest;
import build.mypayquicker.platform.http.response.HttpResponse;
import build.mypayquicker.platform.http.response.HttpStringResponse;
import java.io.IOException;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * This class lists all the endpoints of the groups.
 */
public final class ProgramController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public ProgramController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public ProgramController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * Retrieve a list of all programs that supports filtering, sorting, and pagination through
     * existing mechanisms.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void listPrograms() throws ApiException, IOException {
        HttpRequest request = buildListProgramsRequest();
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        handleListProgramsResponse(context);
    }

    /**
     * Retrieve a list of all programs that supports filtering, sorting, and pagination through
     * existing mechanisms.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> listProgramsAsync() {
        return makeHttpCallAsync(() -> buildListProgramsRequest(),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleListProgramsResponse(context));
    }

    /**
     * Builds the HttpRequest object for listPrograms.
     */
    private HttpRequest buildListProgramsRequest() {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/programs");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for listPrograms.
     * @return An object of type void
     */
    private Void handleListProgramsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        return null;
    }

    /**
     * Retrieve a single program configuration.
     * @param  progToken  Required parameter: Auto-generated unique identifier representing a
     *         program, prefixed with &lt;i&gt;prog-&lt;/i&gt;.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void retrieveProgram(
            final String progToken) throws ApiException, IOException {
        HttpRequest request = buildRetrieveProgramRequest(progToken);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        handleRetrieveProgramResponse(context);
    }

    /**
     * Retrieve a single program configuration.
     * @param  progToken  Required parameter: Auto-generated unique identifier representing a
     *         program, prefixed with &lt;i&gt;prog-&lt;/i&gt;.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> retrieveProgramAsync(
            final String progToken) {
        return makeHttpCallAsync(() -> buildRetrieveProgramRequest(progToken),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleRetrieveProgramResponse(context));
    }

    /**
     * Builds the HttpRequest object for retrieveProgram.
     */
    private HttpRequest buildRetrieveProgramRequest(
            final String progToken) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/programs/{prog-token}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("prog-token",
                new SimpleEntry<Object, Boolean>(progToken, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for retrieveProgram.
     * @return An object of type void
     */
    private Void handleRetrieveProgramResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        return null;
    }

    /**
     * Retrieve a list of all program agreements that supports filtering, sorting, and pagination
     * through existing mechanisms.
     * @param  progToken  Required parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void listProgramAgreements(
            final String progToken) throws ApiException, IOException {
        HttpRequest request = buildListProgramAgreementsRequest(progToken);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        handleListProgramAgreementsResponse(context);
    }

    /**
     * Retrieve a list of all program agreements that supports filtering, sorting, and pagination
     * through existing mechanisms.
     * @param  progToken  Required parameter: Example:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> listProgramAgreementsAsync(
            final String progToken) {
        return makeHttpCallAsync(() -> buildListProgramAgreementsRequest(progToken),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleListProgramAgreementsResponse(context));
    }

    /**
     * Builds the HttpRequest object for listProgramAgreements.
     */
    private HttpRequest buildListProgramAgreementsRequest(
            final String progToken) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/programs/{prog-token}/agreements");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("prog-token",
                new SimpleEntry<Object, Boolean>(progToken, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for listProgramAgreements.
     * @return An object of type void
     */
    private Void handleListProgramAgreementsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        return null;
    }

    /**
     * Retrieve a single program agreement.
     * @param  progToken  Required parameter: Auto-generated unique identifier representing a
     *         program, prefixed with &lt;i&gt;prog-&lt;/i&gt;.
     * @param  agmtToken  Required parameter: Auto-generated unique identifier representing a
     *         program agreement, prefixed with &lt;i&gt;agmt-&lt;/i&gt;.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void retrieveProgramAgreement(
            final String progToken,
            final String agmtToken) throws ApiException, IOException {
        HttpRequest request = buildRetrieveProgramAgreementRequest(progToken, agmtToken);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        handleRetrieveProgramAgreementResponse(context);
    }

    /**
     * Retrieve a single program agreement.
     * @param  progToken  Required parameter: Auto-generated unique identifier representing a
     *         program, prefixed with &lt;i&gt;prog-&lt;/i&gt;.
     * @param  agmtToken  Required parameter: Auto-generated unique identifier representing a
     *         program agreement, prefixed with &lt;i&gt;agmt-&lt;/i&gt;.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> retrieveProgramAgreementAsync(
            final String progToken,
            final String agmtToken) {
        return makeHttpCallAsync(() -> buildRetrieveProgramAgreementRequest(progToken, agmtToken),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleRetrieveProgramAgreementResponse(context));
    }

    /**
     * Builds the HttpRequest object for retrieveProgramAgreement.
     */
    private HttpRequest buildRetrieveProgramAgreementRequest(
            final String progToken,
            final String agmtToken) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/programs/{prog-token}/agreements/{agmt-token}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("prog-token",
                new SimpleEntry<Object, Boolean>(progToken, true));
        templateParameters.put("agmt-token",
                new SimpleEntry<Object, Boolean>(agmtToken, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for retrieveProgramAgreement.
     * @return An object of type void
     */
    private Void handleRetrieveProgramAgreementResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        return null;
    }

}