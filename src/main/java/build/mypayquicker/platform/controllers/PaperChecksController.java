/*
 * PQAPIV2Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package build.mypayquicker.platform.controllers;

import build.mypayquicker.platform.ApiHelper;
import build.mypayquicker.platform.AuthManager;
import build.mypayquicker.platform.Configuration;
import build.mypayquicker.platform.exceptions.ApiException;
import build.mypayquicker.platform.http.Headers;
import build.mypayquicker.platform.http.client.HttpCallback;
import build.mypayquicker.platform.http.client.HttpClient;
import build.mypayquicker.platform.http.client.HttpContext;
import build.mypayquicker.platform.http.request.HttpRequest;
import build.mypayquicker.platform.http.response.HttpResponse;
import build.mypayquicker.platform.http.response.HttpStringResponse;
import build.mypayquicker.platform.models.LanguageTypesEnum;
import build.mypayquicker.platform.models.PaperCheckBase;
import build.mypayquicker.platform.models.PaperCheckCollectionResponse;
import build.mypayquicker.platform.models.PaperCheckResponse;
import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.IOException;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * This class lists all the endpoints of the groups.
 */
public final class PaperChecksController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public PaperChecksController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public PaperChecksController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * Retrieve a list of paper checks that supports filtering, sorting, and pagination through
     * existing mechanisms.
     * @param  userToken  Required parameter: Auto-generated unique identifier representing a user,
     *         prefixed with &lt;i&gt;user-&lt;/i&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @param  page  Optional parameter: Page number of specific page to return
     * @param  pageSize  Optional parameter: Number of items to be displayed per page
     * @param  filter  Optional parameter: Filter request results by specific criteria.
     * @param  sort  Optional parameter: Sort request results by specific attribute.
     * @param  language  Optional parameter: Filter results by language type.
     * @return    Returns the PaperCheckCollectionResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public PaperCheckCollectionResponse listPaperChecks(
            final String userToken,
            final String xMyPayQuickerVersion,
            final Integer page,
            final Integer pageSize,
            final String filter,
            final String sort,
            final LanguageTypesEnum language) throws ApiException, IOException {
        HttpRequest request = buildListPaperChecksRequest(userToken, xMyPayQuickerVersion, page,
                pageSize, filter, sort, language);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleListPaperChecksResponse(context);
    }

    /**
     * Retrieve a list of paper checks that supports filtering, sorting, and pagination through
     * existing mechanisms.
     * @param  userToken  Required parameter: Auto-generated unique identifier representing a user,
     *         prefixed with &lt;i&gt;user-&lt;/i&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @param  page  Optional parameter: Page number of specific page to return
     * @param  pageSize  Optional parameter: Number of items to be displayed per page
     * @param  filter  Optional parameter: Filter request results by specific criteria.
     * @param  sort  Optional parameter: Sort request results by specific attribute.
     * @param  language  Optional parameter: Filter results by language type.
     * @return    Returns the PaperCheckCollectionResponse response from the API call
     */
    public CompletableFuture<PaperCheckCollectionResponse> listPaperChecksAsync(
            final String userToken,
            final String xMyPayQuickerVersion,
            final Integer page,
            final Integer pageSize,
            final String filter,
            final String sort,
            final LanguageTypesEnum language) {
        return makeHttpCallAsync(() -> buildListPaperChecksRequest(userToken, xMyPayQuickerVersion,
                page, pageSize, filter, sort, language),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleListPaperChecksResponse(context));
    }

    /**
     * Builds the HttpRequest object for listPaperChecks.
     */
    private HttpRequest buildListPaperChecksRequest(
            final String userToken,
            final String xMyPayQuickerVersion,
            final Integer page,
            final Integer pageSize,
            final String filter,
            final String sort,
            final LanguageTypesEnum language) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/users/{user-token}/paperchecks");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("user-token",
                new SimpleEntry<Object, Boolean>(userToken, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("page", page);
        queryParameters.put("pageSize",
                (pageSize != null) ? pageSize : 20);
        queryParameters.put("filter", filter);
        queryParameters.put("sort", sort);
        queryParameters.put("language",
                (language != null) ? language.value() : null);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("X-MyPayQuicker-Version", xMyPayQuickerVersion);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for listPaperChecks.
     * @return An object of type PaperCheckCollectionResponse
     */
    private PaperCheckCollectionResponse handleListPaperChecksResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        PaperCheckCollectionResponse result = ApiHelper.deserialize(responseBody,
                PaperCheckCollectionResponse.class);

        return result;
    }

    /**
     * Create a quote for a paper check.
     * @param  userToken  Required parameter: Auto-generated unique identifier representing a user,
     *         prefixed with &lt;i&gt;user-&lt;/i&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @param  body  Optional parameter: Example:
     * @return    Returns the PaperCheckResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public PaperCheckResponse orderPaperCheck(
            final String userToken,
            final String xMyPayQuickerVersion,
            final PaperCheckBase body) throws ApiException, IOException {
        HttpRequest request = buildOrderPaperCheckRequest(userToken, xMyPayQuickerVersion, body);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleOrderPaperCheckResponse(context);
    }

    /**
     * Create a quote for a paper check.
     * @param  userToken  Required parameter: Auto-generated unique identifier representing a user,
     *         prefixed with &lt;i&gt;user-&lt;/i&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @param  body  Optional parameter: Example:
     * @return    Returns the PaperCheckResponse response from the API call
     */
    public CompletableFuture<PaperCheckResponse> orderPaperCheckAsync(
            final String userToken,
            final String xMyPayQuickerVersion,
            final PaperCheckBase body) {
        return makeHttpCallAsync(() -> buildOrderPaperCheckRequest(userToken, xMyPayQuickerVersion,
                body),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleOrderPaperCheckResponse(context));
    }

    /**
     * Builds the HttpRequest object for orderPaperCheck.
     */
    private HttpRequest buildOrderPaperCheckRequest(
            final String userToken,
            final String xMyPayQuickerVersion,
            final PaperCheckBase body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/users/{user-token}/paperchecks");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("user-token",
                new SimpleEntry<Object, Boolean>(userToken, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("X-MyPayQuicker-Version", xMyPayQuickerVersion);
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for orderPaperCheck.
     * @return An object of type PaperCheckResponse
     */
    private PaperCheckResponse handleOrderPaperCheckResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        PaperCheckResponse result = ApiHelper.deserialize(responseBody,
                PaperCheckResponse.class);

        return result;
    }

    /**
     * Retrieve a list of paper checks by destination token that supports filtering, sorting, and
     * pagination through existing mechanisms.
     * @param  userToken  Required parameter: Auto-generated unique identifier representing a user,
     *         prefixed with &lt;i&gt;user-&lt;/i&gt;.
     * @param  xferToken  Required parameter: Auto-generated unique identifier representing an
     *         individual transfer transaction, prefixed with &lt;i&gt;xfer-&lt;/i&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @param  page  Optional parameter: Page number of specific page to return
     * @param  pageSize  Optional parameter: Number of items to be displayed per page
     * @param  filter  Optional parameter: Filter request results by specific criteria.
     * @param  sort  Optional parameter: Sort request results by specific attribute.
     * @param  language  Optional parameter: Filter results by language type.
     * @return    Returns the PaperCheckResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public PaperCheckResponse retrievePaperCheck(
            final String userToken,
            final String xferToken,
            final String xMyPayQuickerVersion,
            final Integer page,
            final Integer pageSize,
            final String filter,
            final String sort,
            final LanguageTypesEnum language) throws ApiException, IOException {
        HttpRequest request = buildRetrievePaperCheckRequest(userToken, xferToken,
                xMyPayQuickerVersion, page, pageSize, filter, sort, language);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleRetrievePaperCheckResponse(context);
    }

    /**
     * Retrieve a list of paper checks by destination token that supports filtering, sorting, and
     * pagination through existing mechanisms.
     * @param  userToken  Required parameter: Auto-generated unique identifier representing a user,
     *         prefixed with &lt;i&gt;user-&lt;/i&gt;.
     * @param  xferToken  Required parameter: Auto-generated unique identifier representing an
     *         individual transfer transaction, prefixed with &lt;i&gt;xfer-&lt;/i&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @param  page  Optional parameter: Page number of specific page to return
     * @param  pageSize  Optional parameter: Number of items to be displayed per page
     * @param  filter  Optional parameter: Filter request results by specific criteria.
     * @param  sort  Optional parameter: Sort request results by specific attribute.
     * @param  language  Optional parameter: Filter results by language type.
     * @return    Returns the PaperCheckResponse response from the API call
     */
    public CompletableFuture<PaperCheckResponse> retrievePaperCheckAsync(
            final String userToken,
            final String xferToken,
            final String xMyPayQuickerVersion,
            final Integer page,
            final Integer pageSize,
            final String filter,
            final String sort,
            final LanguageTypesEnum language) {
        return makeHttpCallAsync(() -> buildRetrievePaperCheckRequest(userToken, xferToken,
                xMyPayQuickerVersion, page, pageSize, filter, sort, language),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleRetrievePaperCheckResponse(context));
    }

    /**
     * Builds the HttpRequest object for retrievePaperCheck.
     */
    private HttpRequest buildRetrievePaperCheckRequest(
            final String userToken,
            final String xferToken,
            final String xMyPayQuickerVersion,
            final Integer page,
            final Integer pageSize,
            final String filter,
            final String sort,
            final LanguageTypesEnum language) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/users/{user-token}/paper-checks/{xfer-token}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("user-token",
                new SimpleEntry<Object, Boolean>(userToken, true));
        templateParameters.put("xfer-token",
                new SimpleEntry<Object, Boolean>(xferToken, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("page", page);
        queryParameters.put("pageSize",
                (pageSize != null) ? pageSize : 20);
        queryParameters.put("filter", filter);
        queryParameters.put("sort", sort);
        queryParameters.put("language",
                (language != null) ? language.value() : null);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("X-MyPayQuicker-Version", xMyPayQuickerVersion);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for retrievePaperCheck.
     * @return An object of type PaperCheckResponse
     */
    private PaperCheckResponse handleRetrievePaperCheckResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        PaperCheckResponse result = ApiHelper.deserialize(responseBody,
                PaperCheckResponse.class);

        return result;
    }

    /**
     * Create a quote for a paper check.
     * @param  userToken  Required parameter: Auto-generated unique identifier representing a user,
     *         prefixed with &lt;i&gt;user-&lt;/i&gt;.
     * @param  xferToken  Required parameter: Auto-generated unique identifier representing an
     *         individual transfer transaction, prefixed with &lt;i&gt;xfer-&lt;/i&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @param  body  Optional parameter: Example:
     * @return    Returns the PaperCheckResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public PaperCheckResponse updatePaperCheck(
            final String userToken,
            final String xferToken,
            final String xMyPayQuickerVersion,
            final Object body) throws ApiException, IOException {
        HttpRequest request = buildUpdatePaperCheckRequest(userToken, xferToken,
                xMyPayQuickerVersion, body);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleUpdatePaperCheckResponse(context);
    }

    /**
     * Create a quote for a paper check.
     * @param  userToken  Required parameter: Auto-generated unique identifier representing a user,
     *         prefixed with &lt;i&gt;user-&lt;/i&gt;.
     * @param  xferToken  Required parameter: Auto-generated unique identifier representing an
     *         individual transfer transaction, prefixed with &lt;i&gt;xfer-&lt;/i&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @param  body  Optional parameter: Example:
     * @return    Returns the PaperCheckResponse response from the API call
     */
    public CompletableFuture<PaperCheckResponse> updatePaperCheckAsync(
            final String userToken,
            final String xferToken,
            final String xMyPayQuickerVersion,
            final Object body) {
        return makeHttpCallAsync(() -> buildUpdatePaperCheckRequest(userToken, xferToken,
                xMyPayQuickerVersion, body),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleUpdatePaperCheckResponse(context));
    }

    /**
     * Builds the HttpRequest object for updatePaperCheck.
     */
    private HttpRequest buildUpdatePaperCheckRequest(
            final String userToken,
            final String xferToken,
            final String xMyPayQuickerVersion,
            final Object body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/users/{user-token}/paper-checks/{xfer-token}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("user-token",
                new SimpleEntry<Object, Boolean>(userToken, true));
        templateParameters.put("xfer-token",
                new SimpleEntry<Object, Boolean>(xferToken, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("X-MyPayQuicker-Version", xMyPayQuickerVersion);
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().putBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for updatePaperCheck.
     * @return An object of type PaperCheckResponse
     */
    private PaperCheckResponse handleUpdatePaperCheckResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        PaperCheckResponse result = ApiHelper.deserialize(responseBody,
                PaperCheckResponse.class);

        return result;
    }

    /**
     * Delete a paper check by destination token.
     * @param  userToken  Required parameter: Auto-generated unique identifier representing a user,
     *         prefixed with &lt;i&gt;user-&lt;/i&gt;.
     * @param  xferToken  Required parameter: Auto-generated unique identifier representing an
     *         individual transfer transaction, prefixed with &lt;i&gt;xfer-&lt;/i&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void cancelPaperCheck(
            final String userToken,
            final String xferToken,
            final String xMyPayQuickerVersion) throws ApiException, IOException {
        HttpRequest request = buildCancelPaperCheckRequest(userToken, xferToken,
                xMyPayQuickerVersion);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        handleCancelPaperCheckResponse(context);
    }

    /**
     * Delete a paper check by destination token.
     * @param  userToken  Required parameter: Auto-generated unique identifier representing a user,
     *         prefixed with &lt;i&gt;user-&lt;/i&gt;.
     * @param  xferToken  Required parameter: Auto-generated unique identifier representing an
     *         individual transfer transaction, prefixed with &lt;i&gt;xfer-&lt;/i&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> cancelPaperCheckAsync(
            final String userToken,
            final String xferToken,
            final String xMyPayQuickerVersion) {
        return makeHttpCallAsync(() -> buildCancelPaperCheckRequest(userToken, xferToken,
                xMyPayQuickerVersion),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleCancelPaperCheckResponse(context));
    }

    /**
     * Builds the HttpRequest object for cancelPaperCheck.
     */
    private HttpRequest buildCancelPaperCheckRequest(
            final String userToken,
            final String xferToken,
            final String xMyPayQuickerVersion) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/users/{user-token}/paper-checks/{xfer-token}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("user-token",
                new SimpleEntry<Object, Boolean>(userToken, true));
        templateParameters.put("xfer-token",
                new SimpleEntry<Object, Boolean>(xferToken, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("X-MyPayQuicker-Version", xMyPayQuickerVersion);
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().delete(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for cancelPaperCheck.
     * @return An object of type void
     */
    private Void handleCancelPaperCheckResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        return null;
    }

}