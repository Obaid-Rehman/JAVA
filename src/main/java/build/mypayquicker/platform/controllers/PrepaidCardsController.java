/*
 * PQAPIV2Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package build.mypayquicker.platform.controllers;

import build.mypayquicker.platform.ApiHelper;
import build.mypayquicker.platform.AuthManager;
import build.mypayquicker.platform.Configuration;
import build.mypayquicker.platform.exceptions.ApiException;
import build.mypayquicker.platform.http.Headers;
import build.mypayquicker.platform.http.client.HttpCallback;
import build.mypayquicker.platform.http.client.HttpClient;
import build.mypayquicker.platform.http.client.HttpContext;
import build.mypayquicker.platform.http.request.HttpRequest;
import build.mypayquicker.platform.http.response.HttpResponse;
import build.mypayquicker.platform.http.response.HttpStringResponse;
import build.mypayquicker.platform.models.FormatEnum;
import build.mypayquicker.platform.models.LanguageTypesEnum;
import build.mypayquicker.platform.models.PrepaidCardBase;
import build.mypayquicker.platform.models.PrepaidCardCollectionResponse;
import build.mypayquicker.platform.models.PrepaidCardDataResponse;
import build.mypayquicker.platform.models.PrepaidCardDataTokenResponse;
import build.mypayquicker.platform.models.PrepaidCardPin;
import build.mypayquicker.platform.models.PrepaidCardPinToken;
import build.mypayquicker.platform.models.PrepaidCardRequestResponse;
import build.mypayquicker.platform.models.PrepaidCardResponse;
import build.mypayquicker.platform.models.PrepaidCardStatus;
import build.mypayquicker.platform.models.SideEnum;
import build.mypayquicker.platform.models.UsersPrepaidCardsPinResponse;
import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.IOException;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * This class lists all the endpoints of the groups.
 */
public final class PrepaidCardsController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public PrepaidCardsController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public PrepaidCardsController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * Replace an existing Prepaid Card specifying the replacement reason and the card package for
     * the replacement card.
     * @param  userToken  Required parameter: Auto-generated unique identifier representing a user,
     *         prefixed with &lt;i&gt;user-&lt;/i&gt;.
     * @param  destToken  Required parameter: Auto-generated unique identifier representing a
     *         transfer destination, including prepaid cards, bank accounts, paper checks, and other
     *         users, prefixed with &lt;i&gt;dest-&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @param  body  Optional parameter: Example:
     * @return    Returns the PrepaidCardResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public PrepaidCardResponse replacePrepaidCard(
            final String userToken,
            final String destToken,
            final String xMyPayQuickerVersion,
            final Object body) throws ApiException, IOException {
        HttpRequest request = buildReplacePrepaidCardRequest(userToken, destToken,
                xMyPayQuickerVersion, body);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleReplacePrepaidCardResponse(context);
    }

    /**
     * Replace an existing Prepaid Card specifying the replacement reason and the card package for
     * the replacement card.
     * @param  userToken  Required parameter: Auto-generated unique identifier representing a user,
     *         prefixed with &lt;i&gt;user-&lt;/i&gt;.
     * @param  destToken  Required parameter: Auto-generated unique identifier representing a
     *         transfer destination, including prepaid cards, bank accounts, paper checks, and other
     *         users, prefixed with &lt;i&gt;dest-&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @param  body  Optional parameter: Example:
     * @return    Returns the PrepaidCardResponse response from the API call
     */
    public CompletableFuture<PrepaidCardResponse> replacePrepaidCardAsync(
            final String userToken,
            final String destToken,
            final String xMyPayQuickerVersion,
            final Object body) {
        return makeHttpCallAsync(() -> buildReplacePrepaidCardRequest(userToken, destToken,
                xMyPayQuickerVersion, body),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleReplacePrepaidCardResponse(context));
    }

    /**
     * Builds the HttpRequest object for replacePrepaidCard.
     */
    private HttpRequest buildReplacePrepaidCardRequest(
            final String userToken,
            final String destToken,
            final String xMyPayQuickerVersion,
            final Object body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/users/{user-token}/prepaid-cards/{dest-token}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("user-token",
                new SimpleEntry<Object, Boolean>(userToken, true));
        templateParameters.put("dest-token",
                new SimpleEntry<Object, Boolean>(destToken, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("X-MyPayQuicker-Version", xMyPayQuickerVersion);
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for replacePrepaidCard.
     * @return An object of type PrepaidCardResponse
     */
    private PrepaidCardResponse handleReplacePrepaidCardResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        PrepaidCardResponse result = ApiHelper.deserialize(responseBody,
                PrepaidCardResponse.class);

        return result;
    }

    /**
     * Retrieve Prepaid Card details by destination token.
     * @param  userToken  Required parameter: Auto-generated unique identifier representing a user,
     *         prefixed with &lt;i&gt;user-&lt;/i&gt;.
     * @param  destToken  Required parameter: Auto-generated unique identifier representing a
     *         transfer destination, including prepaid cards, bank accounts, paper checks, and other
     *         users, prefixed with &lt;i&gt;dest-&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @return    Returns the PrepaidCardResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public PrepaidCardResponse retrievePrepaidCard(
            final String userToken,
            final String destToken,
            final String xMyPayQuickerVersion) throws ApiException, IOException {
        HttpRequest request = buildRetrievePrepaidCardRequest(userToken, destToken,
                xMyPayQuickerVersion);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleRetrievePrepaidCardResponse(context);
    }

    /**
     * Retrieve Prepaid Card details by destination token.
     * @param  userToken  Required parameter: Auto-generated unique identifier representing a user,
     *         prefixed with &lt;i&gt;user-&lt;/i&gt;.
     * @param  destToken  Required parameter: Auto-generated unique identifier representing a
     *         transfer destination, including prepaid cards, bank accounts, paper checks, and other
     *         users, prefixed with &lt;i&gt;dest-&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @return    Returns the PrepaidCardResponse response from the API call
     */
    public CompletableFuture<PrepaidCardResponse> retrievePrepaidCardAsync(
            final String userToken,
            final String destToken,
            final String xMyPayQuickerVersion) {
        return makeHttpCallAsync(() -> buildRetrievePrepaidCardRequest(userToken, destToken,
                xMyPayQuickerVersion),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleRetrievePrepaidCardResponse(context));
    }

    /**
     * Builds the HttpRequest object for retrievePrepaidCard.
     */
    private HttpRequest buildRetrievePrepaidCardRequest(
            final String userToken,
            final String destToken,
            final String xMyPayQuickerVersion) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/users/{user-token}/prepaid-cards/{dest-token}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("user-token",
                new SimpleEntry<Object, Boolean>(userToken, true));
        templateParameters.put("dest-token",
                new SimpleEntry<Object, Boolean>(destToken, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("X-MyPayQuicker-Version", xMyPayQuickerVersion);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for retrievePrepaidCard.
     * @return An object of type PrepaidCardResponse
     */
    private PrepaidCardResponse handleRetrievePrepaidCardResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        PrepaidCardResponse result = ApiHelper.deserialize(responseBody,
                PrepaidCardResponse.class);

        return result;
    }

    /**
     * Partial Prepaid Card update typically used when modifying card status. &lt;i&gt;*Does not require
     * the entire object be passed in the request&lt;/i&gt;.
     * @param  userToken  Required parameter: Auto-generated unique identifier representing a user,
     *         prefixed with &lt;i&gt;user-&lt;/i&gt;.
     * @param  destToken  Required parameter: Auto-generated unique identifier representing a
     *         transfer destination, including prepaid cards, bank accounts, paper checks, and other
     *         users, prefixed with &lt;i&gt;dest-&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @param  body  Optional parameter: Example:
     * @return    Returns the PrepaidCardResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public PrepaidCardResponse updatePrepaidCardPartial(
            final String userToken,
            final String destToken,
            final String xMyPayQuickerVersion,
            final PrepaidCardStatus body) throws ApiException, IOException {
        HttpRequest request = buildUpdatePrepaidCardPartialRequest(userToken, destToken,
                xMyPayQuickerVersion, body);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleUpdatePrepaidCardPartialResponse(context);
    }

    /**
     * Partial Prepaid Card update typically used when modifying card status. &lt;i&gt;*Does not require
     * the entire object be passed in the request&lt;/i&gt;.
     * @param  userToken  Required parameter: Auto-generated unique identifier representing a user,
     *         prefixed with &lt;i&gt;user-&lt;/i&gt;.
     * @param  destToken  Required parameter: Auto-generated unique identifier representing a
     *         transfer destination, including prepaid cards, bank accounts, paper checks, and other
     *         users, prefixed with &lt;i&gt;dest-&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @param  body  Optional parameter: Example:
     * @return    Returns the PrepaidCardResponse response from the API call
     */
    public CompletableFuture<PrepaidCardResponse> updatePrepaidCardPartialAsync(
            final String userToken,
            final String destToken,
            final String xMyPayQuickerVersion,
            final PrepaidCardStatus body) {
        return makeHttpCallAsync(() -> buildUpdatePrepaidCardPartialRequest(userToken, destToken,
                xMyPayQuickerVersion, body),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleUpdatePrepaidCardPartialResponse(context));
    }

    /**
     * Builds the HttpRequest object for updatePrepaidCardPartial.
     */
    private HttpRequest buildUpdatePrepaidCardPartialRequest(
            final String userToken,
            final String destToken,
            final String xMyPayQuickerVersion,
            final PrepaidCardStatus body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/users/{user-token}/prepaid-cards/{dest-token}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("user-token",
                new SimpleEntry<Object, Boolean>(userToken, true));
        templateParameters.put("dest-token",
                new SimpleEntry<Object, Boolean>(destToken, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("X-MyPayQuicker-Version", xMyPayQuickerVersion);
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().patchBody(queryBuilder, headers, null,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for updatePrepaidCardPartial.
     * @return An object of type PrepaidCardResponse
     */
    private PrepaidCardResponse handleUpdatePrepaidCardPartialResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        PrepaidCardResponse result = ApiHelper.deserialize(responseBody,
                PrepaidCardResponse.class);

        return result;
    }

    /**
     * Retrieve one part of a two-part token required to reveal or set a client side PIN. &lt;i&gt;*Not
     * all programs support a reveal or set PIN operation.&lt;/i&gt;.
     * @param  userToken  Required parameter: Auto-generated unique identifier representing a user,
     *         prefixed with &lt;i&gt;user-&lt;/i&gt;.
     * @param  destToken  Required parameter: Auto-generated unique identifier representing a
     *         transfer destination, including prepaid cards, bank accounts, paper checks, and other
     *         users, prefixed with &lt;i&gt;dest-&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @return    Returns the PrepaidCardPinToken response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public PrepaidCardPinToken generatePINOperationToken(
            final String userToken,
            final String destToken,
            final String xMyPayQuickerVersion) throws ApiException, IOException {
        HttpRequest request = buildGeneratePINOperationTokenRequest(userToken, destToken,
                xMyPayQuickerVersion);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGeneratePINOperationTokenResponse(context);
    }

    /**
     * Retrieve one part of a two-part token required to reveal or set a client side PIN. &lt;i&gt;*Not
     * all programs support a reveal or set PIN operation.&lt;/i&gt;.
     * @param  userToken  Required parameter: Auto-generated unique identifier representing a user,
     *         prefixed with &lt;i&gt;user-&lt;/i&gt;.
     * @param  destToken  Required parameter: Auto-generated unique identifier representing a
     *         transfer destination, including prepaid cards, bank accounts, paper checks, and other
     *         users, prefixed with &lt;i&gt;dest-&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @return    Returns the PrepaidCardPinToken response from the API call
     */
    public CompletableFuture<PrepaidCardPinToken> generatePINOperationTokenAsync(
            final String userToken,
            final String destToken,
            final String xMyPayQuickerVersion) {
        return makeHttpCallAsync(() -> buildGeneratePINOperationTokenRequest(userToken, destToken,
                xMyPayQuickerVersion),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGeneratePINOperationTokenResponse(context));
    }

    /**
     * Builds the HttpRequest object for generatePINOperationToken.
     */
    private HttpRequest buildGeneratePINOperationTokenRequest(
            final String userToken,
            final String destToken,
            final String xMyPayQuickerVersion) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/users/{user-token}/prepaid-cards/{dest-token}/pin");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("user-token",
                new SimpleEntry<Object, Boolean>(userToken, true));
        templateParameters.put("dest-token",
                new SimpleEntry<Object, Boolean>(destToken, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("X-MyPayQuicker-Version", xMyPayQuickerVersion);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for generatePINOperationToken.
     * @return An object of type PrepaidCardPinToken
     */
    private PrepaidCardPinToken handleGeneratePINOperationTokenResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        PrepaidCardPinToken result = ApiHelper.deserialize(responseBody,
                PrepaidCardPinToken.class);

        return result;
    }

    /**
     * Allows the setting of a PIN if supported by program.
     * @param  userToken  Required parameter: Auto-generated unique identifier representing a user,
     *         prefixed with &lt;i&gt;user-&lt;/i&gt;.
     * @param  destToken  Required parameter: Auto-generated unique identifier representing a
     *         transfer destination, including prepaid cards, bank accounts, paper checks, and other
     *         users, prefixed with &lt;i&gt;dest-&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @param  token  Required parameter: Token used as part of a two-leg card PIN reveal request
     *         sent directly from the client, generally involving a second piece of data such as the
     *         CVV code on the back of a card.
     * @param  cardPin  Required parameter: Prepaid card PIN for ATM and Debit usage
     * @return    Returns the UsersPrepaidCardsPinResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public UsersPrepaidCardsPinResponse setPINIfSupported(
            final String userToken,
            final String destToken,
            final String xMyPayQuickerVersion,
            final String token,
            final String cardPin) throws ApiException, IOException {
        HttpRequest request = buildSetPINIfSupportedRequest(userToken, destToken,
                xMyPayQuickerVersion, token, cardPin);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSetPINIfSupportedResponse(context);
    }

    /**
     * Allows the setting of a PIN if supported by program.
     * @param  userToken  Required parameter: Auto-generated unique identifier representing a user,
     *         prefixed with &lt;i&gt;user-&lt;/i&gt;.
     * @param  destToken  Required parameter: Auto-generated unique identifier representing a
     *         transfer destination, including prepaid cards, bank accounts, paper checks, and other
     *         users, prefixed with &lt;i&gt;dest-&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @param  token  Required parameter: Token used as part of a two-leg card PIN reveal request
     *         sent directly from the client, generally involving a second piece of data such as the
     *         CVV code on the back of a card.
     * @param  cardPin  Required parameter: Prepaid card PIN for ATM and Debit usage
     * @return    Returns the UsersPrepaidCardsPinResponse response from the API call
     */
    public CompletableFuture<UsersPrepaidCardsPinResponse> setPINIfSupportedAsync(
            final String userToken,
            final String destToken,
            final String xMyPayQuickerVersion,
            final String token,
            final String cardPin) {
        return makeHttpCallAsync(() -> buildSetPINIfSupportedRequest(userToken, destToken,
                xMyPayQuickerVersion, token, cardPin),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSetPINIfSupportedResponse(context));
    }

    /**
     * Builds the HttpRequest object for setPINIfSupported.
     */
    private HttpRequest buildSetPINIfSupportedRequest(
            final String userToken,
            final String destToken,
            final String xMyPayQuickerVersion,
            final String token,
            final String cardPin) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/users/{user-token}/prepaid-cards/{dest-token}/pin");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("user-token",
                new SimpleEntry<Object, Boolean>(userToken, true));
        templateParameters.put("dest-token",
                new SimpleEntry<Object, Boolean>(destToken, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("token", token);
        queryParameters.put("cardPin", cardPin);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("X-MyPayQuicker-Version", xMyPayQuickerVersion);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().put(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for setPINIfSupported.
     * @return An object of type UsersPrepaidCardsPinResponse
     */
    private UsersPrepaidCardsPinResponse handleSetPINIfSupportedResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        UsersPrepaidCardsPinResponse result = ApiHelper.deserialize(responseBody,
                UsersPrepaidCardsPinResponse.class);

        return result;
    }

    /**
     * Reveals the PIN for a card where PIN reveal functionality is supported in the program and
     * hosted by PayQuicker.
     * @param  userToken  Required parameter: Auto-generated unique identifier representing a user,
     *         prefixed with &lt;i&gt;user-&lt;/i&gt;.
     * @param  destToken  Required parameter: Auto-generated unique identifier representing a
     *         transfer destination, including prepaid cards, bank accounts, paper checks, and other
     *         users, prefixed with &lt;i&gt;dest-&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @param  token  Required parameter: Token used as part of a two-leg card PIN reveal request
     *         sent directly from the client, generally involving a second piece of data such as the
     *         CVV code on the back of a card.
     * @param  cvc2  Required parameter: Card Verification Value (CVV) located on the back of your
     *         credit card or debit card is a 3-digit number on VISA® and MasterCard® branded credit
     *         cards, and debit cards.
     * @param  body  Optional parameter: Example:
     * @return    Returns the PrepaidCardPin response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public PrepaidCardPin revealPINIfSupported(
            final String userToken,
            final String destToken,
            final String xMyPayQuickerVersion,
            final String token,
            final String cvc2,
            final Object body) throws ApiException, IOException {
        HttpRequest request = buildRevealPINIfSupportedRequest(userToken, destToken,
                xMyPayQuickerVersion, token, cvc2, body);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleRevealPINIfSupportedResponse(context);
    }

    /**
     * Reveals the PIN for a card where PIN reveal functionality is supported in the program and
     * hosted by PayQuicker.
     * @param  userToken  Required parameter: Auto-generated unique identifier representing a user,
     *         prefixed with &lt;i&gt;user-&lt;/i&gt;.
     * @param  destToken  Required parameter: Auto-generated unique identifier representing a
     *         transfer destination, including prepaid cards, bank accounts, paper checks, and other
     *         users, prefixed with &lt;i&gt;dest-&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @param  token  Required parameter: Token used as part of a two-leg card PIN reveal request
     *         sent directly from the client, generally involving a second piece of data such as the
     *         CVV code on the back of a card.
     * @param  cvc2  Required parameter: Card Verification Value (CVV) located on the back of your
     *         credit card or debit card is a 3-digit number on VISA® and MasterCard® branded credit
     *         cards, and debit cards.
     * @param  body  Optional parameter: Example:
     * @return    Returns the PrepaidCardPin response from the API call
     */
    public CompletableFuture<PrepaidCardPin> revealPINIfSupportedAsync(
            final String userToken,
            final String destToken,
            final String xMyPayQuickerVersion,
            final String token,
            final String cvc2,
            final Object body) {
        return makeHttpCallAsync(() -> buildRevealPINIfSupportedRequest(userToken, destToken,
                xMyPayQuickerVersion, token, cvc2, body),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleRevealPINIfSupportedResponse(context));
    }

    /**
     * Builds the HttpRequest object for revealPINIfSupported.
     */
    private HttpRequest buildRevealPINIfSupportedRequest(
            final String userToken,
            final String destToken,
            final String xMyPayQuickerVersion,
            final String token,
            final String cvc2,
            final Object body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/users/{user-token}/prepaid-cards/{dest-token}/pin");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("user-token",
                new SimpleEntry<Object, Boolean>(userToken, true));
        templateParameters.put("dest-token",
                new SimpleEntry<Object, Boolean>(destToken, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("token", token);
        queryParameters.put("cvc2", cvc2);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("X-MyPayQuicker-Version", xMyPayQuickerVersion);
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for revealPINIfSupported.
     * @return An object of type PrepaidCardPin
     */
    private PrepaidCardPin handleRevealPINIfSupportedResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        PrepaidCardPin result = ApiHelper.deserialize(responseBody,
                PrepaidCardPin.class);

        return result;
    }

    /**
     * Retrieve a list of all pre-paid cards by user token that supports filtering, sorting, and
     * pagination through existing mechanisms.
     * @param  userToken  Required parameter: Auto-generated unique identifier representing a user,
     *         prefixed with &lt;i&gt;user-&lt;/i&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @param  page  Optional parameter: Page number of specific page to return
     * @param  pageSize  Optional parameter: Number of items to be displayed per page
     * @param  filter  Optional parameter: Filter request results by specific criteria.
     * @param  sort  Optional parameter: Sort request results by specific attribute.
     * @param  language  Optional parameter: Filter results by language type.
     * @return    Returns the PrepaidCardCollectionResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public PrepaidCardCollectionResponse listPrepaidCards(
            final String userToken,
            final String xMyPayQuickerVersion,
            final Integer page,
            final Integer pageSize,
            final String filter,
            final String sort,
            final LanguageTypesEnum language) throws ApiException, IOException {
        HttpRequest request = buildListPrepaidCardsRequest(userToken, xMyPayQuickerVersion, page,
                pageSize, filter, sort, language);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleListPrepaidCardsResponse(context);
    }

    /**
     * Retrieve a list of all pre-paid cards by user token that supports filtering, sorting, and
     * pagination through existing mechanisms.
     * @param  userToken  Required parameter: Auto-generated unique identifier representing a user,
     *         prefixed with &lt;i&gt;user-&lt;/i&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @param  page  Optional parameter: Page number of specific page to return
     * @param  pageSize  Optional parameter: Number of items to be displayed per page
     * @param  filter  Optional parameter: Filter request results by specific criteria.
     * @param  sort  Optional parameter: Sort request results by specific attribute.
     * @param  language  Optional parameter: Filter results by language type.
     * @return    Returns the PrepaidCardCollectionResponse response from the API call
     */
    public CompletableFuture<PrepaidCardCollectionResponse> listPrepaidCardsAsync(
            final String userToken,
            final String xMyPayQuickerVersion,
            final Integer page,
            final Integer pageSize,
            final String filter,
            final String sort,
            final LanguageTypesEnum language) {
        return makeHttpCallAsync(() -> buildListPrepaidCardsRequest(userToken, xMyPayQuickerVersion,
                page, pageSize, filter, sort, language),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleListPrepaidCardsResponse(context));
    }

    /**
     * Builds the HttpRequest object for listPrepaidCards.
     */
    private HttpRequest buildListPrepaidCardsRequest(
            final String userToken,
            final String xMyPayQuickerVersion,
            final Integer page,
            final Integer pageSize,
            final String filter,
            final String sort,
            final LanguageTypesEnum language) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/users/{user-token}/prepaid-cards");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("user-token",
                new SimpleEntry<Object, Boolean>(userToken, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("page", page);
        queryParameters.put("pageSize",
                (pageSize != null) ? pageSize : 20);
        queryParameters.put("filter", filter);
        queryParameters.put("sort", sort);
        queryParameters.put("language",
                (language != null) ? language.value() : null);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("X-MyPayQuicker-Version", xMyPayQuickerVersion);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for listPrepaidCards.
     * @return An object of type PrepaidCardCollectionResponse
     */
    private PrepaidCardCollectionResponse handleListPrepaidCardsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        PrepaidCardCollectionResponse result = ApiHelper.deserialize(responseBody,
                PrepaidCardCollectionResponse.class);

        return result;
    }

    /**
     * Order a pre-paid card for the user by specifying a cardPackage. &lt;i&gt;*A package defines the
     * type of card, currency, artwork utilized, and often the method of delivery.&lt;/i&gt;.
     * @param  userToken  Required parameter: Auto-generated unique identifier representing a user,
     *         prefixed with &lt;i&gt;user-&lt;/i&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @param  body  Optional parameter: Example:
     * @return    Returns the PrepaidCardRequestResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public PrepaidCardRequestResponse orderPrepaidCard(
            final String userToken,
            final String xMyPayQuickerVersion,
            final PrepaidCardBase body) throws ApiException, IOException {
        HttpRequest request = buildOrderPrepaidCardRequest(userToken, xMyPayQuickerVersion, body);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleOrderPrepaidCardResponse(context);
    }

    /**
     * Order a pre-paid card for the user by specifying a cardPackage. &lt;i&gt;*A package defines the
     * type of card, currency, artwork utilized, and often the method of delivery.&lt;/i&gt;.
     * @param  userToken  Required parameter: Auto-generated unique identifier representing a user,
     *         prefixed with &lt;i&gt;user-&lt;/i&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @param  body  Optional parameter: Example:
     * @return    Returns the PrepaidCardRequestResponse response from the API call
     */
    public CompletableFuture<PrepaidCardRequestResponse> orderPrepaidCardAsync(
            final String userToken,
            final String xMyPayQuickerVersion,
            final PrepaidCardBase body) {
        return makeHttpCallAsync(() -> buildOrderPrepaidCardRequest(userToken, xMyPayQuickerVersion,
                body),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleOrderPrepaidCardResponse(context));
    }

    /**
     * Builds the HttpRequest object for orderPrepaidCard.
     */
    private HttpRequest buildOrderPrepaidCardRequest(
            final String userToken,
            final String xMyPayQuickerVersion,
            final PrepaidCardBase body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/users/{user-token}/prepaid-cards");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("user-token",
                new SimpleEntry<Object, Boolean>(userToken, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("X-MyPayQuicker-Version", xMyPayQuickerVersion);
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for orderPrepaidCard.
     * @return An object of type PrepaidCardRequestResponse
     */
    private PrepaidCardRequestResponse handleOrderPrepaidCardResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        PrepaidCardRequestResponse result = ApiHelper.deserialize(responseBody,
                PrepaidCardRequestResponse.class);

        return result;
    }

    /**
     * Generate a token used to reveal prepaid card information in the form of image data (base64)
     * or JSON.
     * @param  userToken  Required parameter: Example:
     * @param  destToken  Required parameter: Example:
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @param  format  Required parameter: Desired format for the prepaid card data.
     * @param  side  Optional parameter: Side to specify when retrieving a prepaid card's image
     *         data. *Required if IMAGE format specified.
     * @return    Returns the PrepaidCardDataTokenResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public PrepaidCardDataTokenResponse generatePrepaidCardDataToken(
            final String userToken,
            final String destToken,
            final String xMyPayQuickerVersion,
            final FormatEnum format,
            final SideEnum side) throws ApiException, IOException {
        HttpRequest request = buildGeneratePrepaidCardDataTokenRequest(userToken, destToken,
                xMyPayQuickerVersion, format, side);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGeneratePrepaidCardDataTokenResponse(context);
    }

    /**
     * Generate a token used to reveal prepaid card information in the form of image data (base64)
     * or JSON.
     * @param  userToken  Required parameter: Example:
     * @param  destToken  Required parameter: Example:
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @param  format  Required parameter: Desired format for the prepaid card data.
     * @param  side  Optional parameter: Side to specify when retrieving a prepaid card's image
     *         data. *Required if IMAGE format specified.
     * @return    Returns the PrepaidCardDataTokenResponse response from the API call
     */
    public CompletableFuture<PrepaidCardDataTokenResponse> generatePrepaidCardDataTokenAsync(
            final String userToken,
            final String destToken,
            final String xMyPayQuickerVersion,
            final FormatEnum format,
            final SideEnum side) {
        return makeHttpCallAsync(() -> buildGeneratePrepaidCardDataTokenRequest(userToken,
                destToken, xMyPayQuickerVersion, format, side),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGeneratePrepaidCardDataTokenResponse(context));
    }

    /**
     * Builds the HttpRequest object for generatePrepaidCardDataToken.
     */
    private HttpRequest buildGeneratePrepaidCardDataTokenRequest(
            final String userToken,
            final String destToken,
            final String xMyPayQuickerVersion,
            final FormatEnum format,
            final SideEnum side) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/users/{user-token}/prepaid-cards/{dest-token}/pci");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("user-token",
                new SimpleEntry<Object, Boolean>(userToken, true));
        templateParameters.put("dest-token",
                new SimpleEntry<Object, Boolean>(destToken, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("format",
                (format != null) ? format.value() : null);
        queryParameters.put("side",
                (side != null) ? side.value() : null);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("X-MyPayQuicker-Version", xMyPayQuickerVersion);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for generatePrepaidCardDataToken.
     * @return An object of type PrepaidCardDataTokenResponse
     */
    private PrepaidCardDataTokenResponse handleGeneratePrepaidCardDataTokenResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        PrepaidCardDataTokenResponse result = ApiHelper.deserialize(responseBody,
                PrepaidCardDataTokenResponse.class);

        return result;
    }

    /**
     * Return prepaid card data in the form of image data, text, or both.
     * @param  userToken  Required parameter: Example:
     * @param  destToken  Required parameter: Example:
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @param  format  Required parameter: Desired format for the prepaid card data.
     * @param  token  Required parameter: Token used as part of a two-leg card PIN reveal request
     *         sent directly from the client, generally involving a second piece of data such as the
     *         CVV code on the back of a card.
     * @param  side  Optional parameter: Side to specify when retrieving a prepaid card's image
     *         data. *Required if IMAGE format specified.
     * @return    Returns the PrepaidCardDataResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public PrepaidCardDataResponse getPrepaidCardData(
            final String userToken,
            final String destToken,
            final String xMyPayQuickerVersion,
            final FormatEnum format,
            final String token,
            final SideEnum side) throws ApiException, IOException {
        HttpRequest request = buildGetPrepaidCardDataRequest(userToken, destToken,
                xMyPayQuickerVersion, format, token, side);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetPrepaidCardDataResponse(context);
    }

    /**
     * Return prepaid card data in the form of image data, text, or both.
     * @param  userToken  Required parameter: Example:
     * @param  destToken  Required parameter: Example:
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @param  format  Required parameter: Desired format for the prepaid card data.
     * @param  token  Required parameter: Token used as part of a two-leg card PIN reveal request
     *         sent directly from the client, generally involving a second piece of data such as the
     *         CVV code on the back of a card.
     * @param  side  Optional parameter: Side to specify when retrieving a prepaid card's image
     *         data. *Required if IMAGE format specified.
     * @return    Returns the PrepaidCardDataResponse response from the API call
     */
    public CompletableFuture<PrepaidCardDataResponse> getPrepaidCardDataAsync(
            final String userToken,
            final String destToken,
            final String xMyPayQuickerVersion,
            final FormatEnum format,
            final String token,
            final SideEnum side) {
        return makeHttpCallAsync(() -> buildGetPrepaidCardDataRequest(userToken, destToken,
                xMyPayQuickerVersion, format, token, side),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetPrepaidCardDataResponse(context));
    }

    /**
     * Builds the HttpRequest object for getPrepaidCardData.
     */
    private HttpRequest buildGetPrepaidCardDataRequest(
            final String userToken,
            final String destToken,
            final String xMyPayQuickerVersion,
            final FormatEnum format,
            final String token,
            final SideEnum side) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/users/{user-token}/prepaid-cards/{dest-token}/pci");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("user-token",
                new SimpleEntry<Object, Boolean>(userToken, true));
        templateParameters.put("dest-token",
                new SimpleEntry<Object, Boolean>(destToken, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("format",
                (format != null) ? format.value() : null);
        queryParameters.put("token", token);
        queryParameters.put("side",
                (side != null) ? side.value() : null);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("X-MyPayQuicker-Version", xMyPayQuickerVersion);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().post(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getPrepaidCardData.
     * @return An object of type PrepaidCardDataResponse
     */
    private PrepaidCardDataResponse handleGetPrepaidCardDataResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        PrepaidCardDataResponse result = ApiHelper.deserialize(responseBody,
                PrepaidCardDataResponse.class);

        return result;
    }

}