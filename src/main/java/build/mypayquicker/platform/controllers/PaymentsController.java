/*
 * PQAPIV2Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package build.mypayquicker.platform.controllers;

import build.mypayquicker.platform.ApiHelper;
import build.mypayquicker.platform.AuthManager;
import build.mypayquicker.platform.Configuration;
import build.mypayquicker.platform.exceptions.ApiException;
import build.mypayquicker.platform.http.Headers;
import build.mypayquicker.platform.http.client.HttpCallback;
import build.mypayquicker.platform.http.client.HttpClient;
import build.mypayquicker.platform.http.client.HttpContext;
import build.mypayquicker.platform.http.request.HttpRequest;
import build.mypayquicker.platform.http.response.HttpResponse;
import build.mypayquicker.platform.http.response.HttpStringResponse;
import build.mypayquicker.platform.models.LanguageTypesEnum;
import build.mypayquicker.platform.models.PaymentRequest;
import build.mypayquicker.platform.models.PaymentResponse;
import build.mypayquicker.platform.models.PaymentsCollectionResponse;
import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.IOException;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * This class lists all the endpoints of the groups.
 */
public final class PaymentsController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public PaymentsController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public PaymentsController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * Retrieve a list of all payments that supports filtering, sorting, and pagination through
     * existing mechanisms.
     * @param  pmntToken  Required parameter: Auto-generated unique identifier representing an
     *         individual payment transaction and quote, prefixed with &lt;i&gt;pmnt-&lt;/i&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @param  filter  Optional parameter: Filter request results by specific criteria.
     * @param  language  Optional parameter: Filter results by language type.
     * @return    Returns the PaymentResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public PaymentResponse retrievePayment(
            final String pmntToken,
            final String xMyPayQuickerVersion,
            final String filter,
            final LanguageTypesEnum language) throws ApiException, IOException {
        HttpRequest request = buildRetrievePaymentRequest(pmntToken, xMyPayQuickerVersion, filter,
                language);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleRetrievePaymentResponse(context);
    }

    /**
     * Retrieve a list of all payments that supports filtering, sorting, and pagination through
     * existing mechanisms.
     * @param  pmntToken  Required parameter: Auto-generated unique identifier representing an
     *         individual payment transaction and quote, prefixed with &lt;i&gt;pmnt-&lt;/i&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @param  filter  Optional parameter: Filter request results by specific criteria.
     * @param  language  Optional parameter: Filter results by language type.
     * @return    Returns the PaymentResponse response from the API call
     */
    public CompletableFuture<PaymentResponse> retrievePaymentAsync(
            final String pmntToken,
            final String xMyPayQuickerVersion,
            final String filter,
            final LanguageTypesEnum language) {
        return makeHttpCallAsync(() -> buildRetrievePaymentRequest(pmntToken, xMyPayQuickerVersion,
                filter, language),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleRetrievePaymentResponse(context));
    }

    /**
     * Builds the HttpRequest object for retrievePayment.
     */
    private HttpRequest buildRetrievePaymentRequest(
            final String pmntToken,
            final String xMyPayQuickerVersion,
            final String filter,
            final LanguageTypesEnum language) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/payments/{pmnt-token}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("pmnt-token",
                new SimpleEntry<Object, Boolean>(pmntToken, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("filter", filter);
        queryParameters.put("language",
                (language != null) ? language.value() : null);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("X-MyPayQuicker-Version", xMyPayQuickerVersion);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for retrievePayment.
     * @return An object of type PaymentResponse
     */
    private PaymentResponse handleRetrievePaymentResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        PaymentResponse result = ApiHelper.deserialize(responseBody,
                PaymentResponse.class);

        return result;
    }

    /**
     * Accept an open payment quote.
     * @param  pmntToken  Required parameter: Auto-generated unique identifier representing an
     *         individual payment transaction and quote, prefixed with &lt;i&gt;pmnt-&lt;/i&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @param  body  Optional parameter: Example:
     * @return    Returns the PaymentResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public PaymentResponse acceptPaymentQuote(
            final String pmntToken,
            final String xMyPayQuickerVersion,
            final Object body) throws ApiException, IOException {
        HttpRequest request = buildAcceptPaymentQuoteRequest(pmntToken, xMyPayQuickerVersion, body);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleAcceptPaymentQuoteResponse(context);
    }

    /**
     * Accept an open payment quote.
     * @param  pmntToken  Required parameter: Auto-generated unique identifier representing an
     *         individual payment transaction and quote, prefixed with &lt;i&gt;pmnt-&lt;/i&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @param  body  Optional parameter: Example:
     * @return    Returns the PaymentResponse response from the API call
     */
    public CompletableFuture<PaymentResponse> acceptPaymentQuoteAsync(
            final String pmntToken,
            final String xMyPayQuickerVersion,
            final Object body) {
        return makeHttpCallAsync(() -> buildAcceptPaymentQuoteRequest(pmntToken,
                xMyPayQuickerVersion, body),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleAcceptPaymentQuoteResponse(context));
    }

    /**
     * Builds the HttpRequest object for acceptPaymentQuote.
     */
    private HttpRequest buildAcceptPaymentQuoteRequest(
            final String pmntToken,
            final String xMyPayQuickerVersion,
            final Object body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/payments/{pmnt-token}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("pmnt-token",
                new SimpleEntry<Object, Boolean>(pmntToken, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("X-MyPayQuicker-Version", xMyPayQuickerVersion);
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for acceptPaymentQuote.
     * @return An object of type PaymentResponse
     */
    private PaymentResponse handleAcceptPaymentQuoteResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        PaymentResponse result = ApiHelper.deserialize(responseBody,
                PaymentResponse.class);

        return result;
    }

    /**
     * Cancel an open payment quote.
     * @param  pmntToken  Required parameter: Auto-generated unique identifier representing an
     *         individual payment transaction and quote, prefixed with &lt;i&gt;pmnt-&lt;/i&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void cancelPaymentQuote(
            final String pmntToken,
            final String xMyPayQuickerVersion) throws ApiException, IOException {
        HttpRequest request = buildCancelPaymentQuoteRequest(pmntToken, xMyPayQuickerVersion);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        handleCancelPaymentQuoteResponse(context);
    }

    /**
     * Cancel an open payment quote.
     * @param  pmntToken  Required parameter: Auto-generated unique identifier representing an
     *         individual payment transaction and quote, prefixed with &lt;i&gt;pmnt-&lt;/i&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> cancelPaymentQuoteAsync(
            final String pmntToken,
            final String xMyPayQuickerVersion) {
        return makeHttpCallAsync(() -> buildCancelPaymentQuoteRequest(pmntToken,
                xMyPayQuickerVersion),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleCancelPaymentQuoteResponse(context));
    }

    /**
     * Builds the HttpRequest object for cancelPaymentQuote.
     */
    private HttpRequest buildCancelPaymentQuoteRequest(
            final String pmntToken,
            final String xMyPayQuickerVersion) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/payments/{pmnt-token}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("pmnt-token",
                new SimpleEntry<Object, Boolean>(pmntToken, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("X-MyPayQuicker-Version", xMyPayQuickerVersion);
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().delete(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for cancelPaymentQuote.
     * @return An object of type void
     */
    private Void handleCancelPaymentQuoteResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        return null;
    }

    /**
     * Perform a payment retraction for the full payment amount.
     * @param  pmntToken  Required parameter: Auto-generated unique identifier representing an
     *         individual payment transaction and quote, prefixed with &lt;i&gt;pmnt-&lt;/i&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void retractPaymentFull(
            final String pmntToken,
            final String xMyPayQuickerVersion) throws ApiException, IOException {
        HttpRequest request = buildRetractPaymentFullRequest(pmntToken, xMyPayQuickerVersion);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        handleRetractPaymentFullResponse(context);
    }

    /**
     * Perform a payment retraction for the full payment amount.
     * @param  pmntToken  Required parameter: Auto-generated unique identifier representing an
     *         individual payment transaction and quote, prefixed with &lt;i&gt;pmnt-&lt;/i&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> retractPaymentFullAsync(
            final String pmntToken,
            final String xMyPayQuickerVersion) {
        return makeHttpCallAsync(() -> buildRetractPaymentFullRequest(pmntToken,
                xMyPayQuickerVersion),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleRetractPaymentFullResponse(context));
    }

    /**
     * Builds the HttpRequest object for retractPaymentFull.
     */
    private HttpRequest buildRetractPaymentFullRequest(
            final String pmntToken,
            final String xMyPayQuickerVersion) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/payments/{pmnt-token}/retract");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("pmnt-token",
                new SimpleEntry<Object, Boolean>(pmntToken, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("X-MyPayQuicker-Version", xMyPayQuickerVersion);
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().put(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for retractPaymentFull.
     * @return An object of type void
     */
    private Void handleRetractPaymentFullResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        return null;
    }

    /**
     * Perform a payment retraction for a partial payment amount.
     * @param  pmntToken  Required parameter: Auto-generated unique identifier representing an
     *         individual payment transaction and quote, prefixed with &lt;i&gt;pmnt-&lt;/i&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void retractPaymentPartial(
            final String pmntToken,
            final String xMyPayQuickerVersion) throws ApiException, IOException {
        HttpRequest request = buildRetractPaymentPartialRequest(pmntToken, xMyPayQuickerVersion);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        handleRetractPaymentPartialResponse(context);
    }

    /**
     * Perform a payment retraction for a partial payment amount.
     * @param  pmntToken  Required parameter: Auto-generated unique identifier representing an
     *         individual payment transaction and quote, prefixed with &lt;i&gt;pmnt-&lt;/i&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> retractPaymentPartialAsync(
            final String pmntToken,
            final String xMyPayQuickerVersion) {
        return makeHttpCallAsync(() -> buildRetractPaymentPartialRequest(pmntToken,
                xMyPayQuickerVersion),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleRetractPaymentPartialResponse(context));
    }

    /**
     * Builds the HttpRequest object for retractPaymentPartial.
     */
    private HttpRequest buildRetractPaymentPartialRequest(
            final String pmntToken,
            final String xMyPayQuickerVersion) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/payments/{pmnt-token}/retract");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("pmnt-token",
                new SimpleEntry<Object, Boolean>(pmntToken, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("X-MyPayQuicker-Version", xMyPayQuickerVersion);
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().patch(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for retractPaymentPartial.
     * @return An object of type void
     */
    private Void handleRetractPaymentPartialResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        return null;
    }

    /**
     * Retrieve a list of all payments that supports filtering, sorting, and pagination through
     * existing mechanisms.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @param  page  Optional parameter: Page number of specific page to return
     * @param  pageSize  Optional parameter: Number of items to be displayed per page
     * @param  filter  Optional parameter: Filter request results by specific criteria.
     * @param  sort  Optional parameter: Sort request results by specific attribute.
     * @param  language  Optional parameter: Filter results by language type.
     * @return    Returns the PaymentsCollectionResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public PaymentsCollectionResponse listPayments(
            final String xMyPayQuickerVersion,
            final Integer page,
            final Integer pageSize,
            final String filter,
            final String sort,
            final LanguageTypesEnum language) throws ApiException, IOException {
        HttpRequest request = buildListPaymentsRequest(xMyPayQuickerVersion, page, pageSize, filter,
                sort, language);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleListPaymentsResponse(context);
    }

    /**
     * Retrieve a list of all payments that supports filtering, sorting, and pagination through
     * existing mechanisms.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @param  page  Optional parameter: Page number of specific page to return
     * @param  pageSize  Optional parameter: Number of items to be displayed per page
     * @param  filter  Optional parameter: Filter request results by specific criteria.
     * @param  sort  Optional parameter: Sort request results by specific attribute.
     * @param  language  Optional parameter: Filter results by language type.
     * @return    Returns the PaymentsCollectionResponse response from the API call
     */
    public CompletableFuture<PaymentsCollectionResponse> listPaymentsAsync(
            final String xMyPayQuickerVersion,
            final Integer page,
            final Integer pageSize,
            final String filter,
            final String sort,
            final LanguageTypesEnum language) {
        return makeHttpCallAsync(() -> buildListPaymentsRequest(xMyPayQuickerVersion, page,
                pageSize, filter, sort, language),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleListPaymentsResponse(context));
    }

    /**
     * Builds the HttpRequest object for listPayments.
     */
    private HttpRequest buildListPaymentsRequest(
            final String xMyPayQuickerVersion,
            final Integer page,
            final Integer pageSize,
            final String filter,
            final String sort,
            final LanguageTypesEnum language) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/payments");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("page", page);
        queryParameters.put("pageSize",
                (pageSize != null) ? pageSize : 20);
        queryParameters.put("filter", filter);
        queryParameters.put("sort", sort);
        queryParameters.put("language",
                (language != null) ? language.value() : null);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("X-MyPayQuicker-Version", xMyPayQuickerVersion);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for listPayments.
     * @return An object of type PaymentsCollectionResponse
     */
    private PaymentsCollectionResponse handleListPaymentsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        PaymentsCollectionResponse result = ApiHelper.deserialize(responseBody,
                PaymentsCollectionResponse.class);

        return result;
    }

    /**
     * Create a payment quote.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @param  body  Optional parameter: Example:
     * @return    Returns the PaymentResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public PaymentResponse createPaymentQuote(
            final String xMyPayQuickerVersion,
            final PaymentRequest body) throws ApiException, IOException {
        HttpRequest request = buildCreatePaymentQuoteRequest(xMyPayQuickerVersion, body);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleCreatePaymentQuoteResponse(context);
    }

    /**
     * Create a payment quote.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @param  body  Optional parameter: Example:
     * @return    Returns the PaymentResponse response from the API call
     */
    public CompletableFuture<PaymentResponse> createPaymentQuoteAsync(
            final String xMyPayQuickerVersion,
            final PaymentRequest body) {
        return makeHttpCallAsync(() -> buildCreatePaymentQuoteRequest(xMyPayQuickerVersion, body),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleCreatePaymentQuoteResponse(context));
    }

    /**
     * Builds the HttpRequest object for createPaymentQuote.
     */
    private HttpRequest buildCreatePaymentQuoteRequest(
            final String xMyPayQuickerVersion,
            final PaymentRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/payments");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("X-MyPayQuicker-Version", xMyPayQuickerVersion);
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for createPaymentQuote.
     * @return An object of type PaymentResponse
     */
    private PaymentResponse handleCreatePaymentQuoteResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        PaymentResponse result = ApiHelper.deserialize(responseBody,
                PaymentResponse.class);

        return result;
    }

}