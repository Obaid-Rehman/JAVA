/*
 * PQAPIV2Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package build.mypayquicker.platform.controllers;

import build.mypayquicker.platform.ApiHelper;
import build.mypayquicker.platform.AuthManager;
import build.mypayquicker.platform.Configuration;
import build.mypayquicker.platform.exceptions.ApiException;
import build.mypayquicker.platform.http.Headers;
import build.mypayquicker.platform.http.client.HttpCallback;
import build.mypayquicker.platform.http.client.HttpClient;
import build.mypayquicker.platform.http.client.HttpContext;
import build.mypayquicker.platform.http.request.HttpRequest;
import build.mypayquicker.platform.http.response.HttpResponse;
import build.mypayquicker.platform.http.response.HttpStringResponse;
import build.mypayquicker.platform.models.IdentityVerificationCollectionResponse;
import build.mypayquicker.platform.models.IdentityVerificationResponse;
import build.mypayquicker.platform.models.LanguageTypesEnum;
import build.mypayquicker.platform.models.UserBase;
import build.mypayquicker.platform.models.UserCollectionResponse;
import build.mypayquicker.platform.models.UserResponse;
import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.IOException;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * This class lists all the endpoints of the groups.
 */
public final class UsersController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public UsersController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public UsersController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * Update a user object (change email, address change, etc.) using a user token.
     * @param  userToken  Required parameter: Auto-generated unique identifier representing a user,
     *         prefixed with &lt;i&gt;user-&lt;/i&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @param  body  Optional parameter: Example:
     * @return    Returns the UserResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public UserResponse updateUser(
            final String userToken,
            final String xMyPayQuickerVersion,
            final UserBase body) throws ApiException, IOException {
        HttpRequest request = buildUpdateUserRequest(userToken, xMyPayQuickerVersion, body);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleUpdateUserResponse(context);
    }

    /**
     * Update a user object (change email, address change, etc.) using a user token.
     * @param  userToken  Required parameter: Auto-generated unique identifier representing a user,
     *         prefixed with &lt;i&gt;user-&lt;/i&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @param  body  Optional parameter: Example:
     * @return    Returns the UserResponse response from the API call
     */
    public CompletableFuture<UserResponse> updateUserAsync(
            final String userToken,
            final String xMyPayQuickerVersion,
            final UserBase body) {
        return makeHttpCallAsync(() -> buildUpdateUserRequest(userToken, xMyPayQuickerVersion,
                body),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleUpdateUserResponse(context));
    }

    /**
     * Builds the HttpRequest object for updateUser.
     */
    private HttpRequest buildUpdateUserRequest(
            final String userToken,
            final String xMyPayQuickerVersion,
            final UserBase body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/users/{user-token}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("user-token",
                new SimpleEntry<Object, Boolean>(userToken, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("X-MyPayQuicker-Version", xMyPayQuickerVersion);
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().putBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for updateUser.
     * @return An object of type UserResponse
     */
    private UserResponse handleUpdateUserResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        UserResponse result = ApiHelper.deserialize(responseBody,
                UserResponse.class);

        return result;
    }

    /**
     * Retrieve a single user record by user token.
     * @param  userToken  Required parameter: Auto-generated unique identifier representing a user,
     *         prefixed with &lt;i&gt;user-&lt;/i&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @return    Returns the UserResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public UserResponse retrieveUser(
            final String userToken,
            final String xMyPayQuickerVersion) throws ApiException, IOException {
        HttpRequest request = buildRetrieveUserRequest(userToken, xMyPayQuickerVersion);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleRetrieveUserResponse(context);
    }

    /**
     * Retrieve a single user record by user token.
     * @param  userToken  Required parameter: Auto-generated unique identifier representing a user,
     *         prefixed with &lt;i&gt;user-&lt;/i&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @return    Returns the UserResponse response from the API call
     */
    public CompletableFuture<UserResponse> retrieveUserAsync(
            final String userToken,
            final String xMyPayQuickerVersion) {
        return makeHttpCallAsync(() -> buildRetrieveUserRequest(userToken, xMyPayQuickerVersion),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleRetrieveUserResponse(context));
    }

    /**
     * Builds the HttpRequest object for retrieveUser.
     */
    private HttpRequest buildRetrieveUserRequest(
            final String userToken,
            final String xMyPayQuickerVersion) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/users/{user-token}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("user-token",
                new SimpleEntry<Object, Boolean>(userToken, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("X-MyPayQuicker-Version", xMyPayQuickerVersion);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for retrieveUser.
     * @return An object of type UserResponse
     */
    private UserResponse handleRetrieveUserResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        UserResponse result = ApiHelper.deserialize(responseBody,
                UserResponse.class);

        return result;
    }

    /**
     * Retrieve a list of all users that supports filtering, sorting, and pagination through
     * existing mechanisms.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @param  page  Optional parameter: Page number of specific page to return
     * @param  pageSize  Optional parameter: Number of items to be displayed per page
     * @param  filter  Optional parameter: Filter request results by specific criteria.
     * @param  sort  Optional parameter: Sort request results by specific attribute.
     * @param  language  Optional parameter: Filter results by language type.
     * @return    Returns the UserCollectionResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public UserCollectionResponse listUsers(
            final String xMyPayQuickerVersion,
            final Integer page,
            final Integer pageSize,
            final String filter,
            final String sort,
            final LanguageTypesEnum language) throws ApiException, IOException {
        HttpRequest request = buildListUsersRequest(xMyPayQuickerVersion, page, pageSize, filter,
                sort, language);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleListUsersResponse(context);
    }

    /**
     * Retrieve a list of all users that supports filtering, sorting, and pagination through
     * existing mechanisms.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @param  page  Optional parameter: Page number of specific page to return
     * @param  pageSize  Optional parameter: Number of items to be displayed per page
     * @param  filter  Optional parameter: Filter request results by specific criteria.
     * @param  sort  Optional parameter: Sort request results by specific attribute.
     * @param  language  Optional parameter: Filter results by language type.
     * @return    Returns the UserCollectionResponse response from the API call
     */
    public CompletableFuture<UserCollectionResponse> listUsersAsync(
            final String xMyPayQuickerVersion,
            final Integer page,
            final Integer pageSize,
            final String filter,
            final String sort,
            final LanguageTypesEnum language) {
        return makeHttpCallAsync(() -> buildListUsersRequest(xMyPayQuickerVersion, page, pageSize,
                filter, sort, language),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleListUsersResponse(context));
    }

    /**
     * Builds the HttpRequest object for listUsers.
     */
    private HttpRequest buildListUsersRequest(
            final String xMyPayQuickerVersion,
            final Integer page,
            final Integer pageSize,
            final String filter,
            final String sort,
            final LanguageTypesEnum language) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/users");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("page", page);
        queryParameters.put("pageSize",
                (pageSize != null) ? pageSize : 20);
        queryParameters.put("filter", filter);
        queryParameters.put("sort", sort);
        queryParameters.put("language",
                (language != null) ? language.value() : null);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("X-MyPayQuicker-Version", xMyPayQuickerVersion);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for listUsers.
     * @return An object of type UserCollectionResponse
     */
    private UserCollectionResponse handleListUsersResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        UserCollectionResponse result = ApiHelper.deserialize(responseBody,
                UserCollectionResponse.class);

        return result;
    }

    /**
     * Create a new user. Payload contains both required and optional fields for user- and
     * company-based users, allowing for the creation of a corporate/partnership/dba (i.e., Grubhub
     * model) user along with a standard end user (i.e., &lt;i&gt;Payee&lt;/i&gt;). The type of the user
     * (&lt;i&gt;Business&lt;/i&gt; vs. &lt;i&gt;User&lt;/i&gt;) and type of business (&lt;i&gt;Corporation&lt;/i&gt; vs.
     * &lt;i&gt;Partnership&lt;/i&gt;) provide context that impacts KYC etc.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @param  body  Required parameter: Body details of the request
     * @return    Returns the UserResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public UserResponse createUser(
            final String xMyPayQuickerVersion,
            final UserBase body) throws ApiException, IOException {
        HttpRequest request = buildCreateUserRequest(xMyPayQuickerVersion, body);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleCreateUserResponse(context);
    }

    /**
     * Create a new user. Payload contains both required and optional fields for user- and
     * company-based users, allowing for the creation of a corporate/partnership/dba (i.e., Grubhub
     * model) user along with a standard end user (i.e., &lt;i&gt;Payee&lt;/i&gt;). The type of the user
     * (&lt;i&gt;Business&lt;/i&gt; vs. &lt;i&gt;User&lt;/i&gt;) and type of business (&lt;i&gt;Corporation&lt;/i&gt; vs.
     * &lt;i&gt;Partnership&lt;/i&gt;) provide context that impacts KYC etc.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @param  body  Required parameter: Body details of the request
     * @return    Returns the UserResponse response from the API call
     */
    public CompletableFuture<UserResponse> createUserAsync(
            final String xMyPayQuickerVersion,
            final UserBase body) {
        return makeHttpCallAsync(() -> buildCreateUserRequest(xMyPayQuickerVersion, body),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleCreateUserResponse(context));
    }

    /**
     * Builds the HttpRequest object for createUser.
     */
    private HttpRequest buildCreateUserRequest(
            final String xMyPayQuickerVersion,
            final UserBase body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/users");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("X-MyPayQuicker-Version", xMyPayQuickerVersion);
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for createUser.
     * @return An object of type UserResponse
     */
    private UserResponse handleCreateUserResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        UserResponse result = ApiHelper.deserialize(responseBody,
                UserResponse.class);

        return result;
    }

    /**
     * Retrieve a list of IDV checks by user token that supports filtering, sorting, and pagination
     * through existing mechanisms.
     * @param  userToken  Required parameter: Auto-generated unique identifier representing a user,
     *         prefixed with &lt;i&gt;user-&lt;/i&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @return    Returns the IdentityVerificationCollectionResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public IdentityVerificationCollectionResponse listUserIDVChecks(
            final String userToken,
            final String xMyPayQuickerVersion) throws ApiException, IOException {
        HttpRequest request = buildListUserIDVChecksRequest(userToken, xMyPayQuickerVersion);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleListUserIDVChecksResponse(context);
    }

    /**
     * Retrieve a list of IDV checks by user token that supports filtering, sorting, and pagination
     * through existing mechanisms.
     * @param  userToken  Required parameter: Auto-generated unique identifier representing a user,
     *         prefixed with &lt;i&gt;user-&lt;/i&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @return    Returns the IdentityVerificationCollectionResponse response from the API call
     */
    public CompletableFuture<IdentityVerificationCollectionResponse> listUserIDVChecksAsync(
            final String userToken,
            final String xMyPayQuickerVersion) {
        return makeHttpCallAsync(() -> buildListUserIDVChecksRequest(userToken,
                xMyPayQuickerVersion),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleListUserIDVChecksResponse(context));
    }

    /**
     * Builds the HttpRequest object for listUserIDVChecks.
     */
    private HttpRequest buildListUserIDVChecksRequest(
            final String userToken,
            final String xMyPayQuickerVersion) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/users/{user-token}/idv-checks");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("user-token",
                new SimpleEntry<Object, Boolean>(userToken, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("X-MyPayQuicker-Version", xMyPayQuickerVersion);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for listUserIDVChecks.
     * @return An object of type IdentityVerificationCollectionResponse
     */
    private IdentityVerificationCollectionResponse handleListUserIDVChecksResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        IdentityVerificationCollectionResponse result = ApiHelper.deserialize(responseBody,
                IdentityVerificationCollectionResponse.class);

        return result;
    }

    /**
     * Retrieve a list of all IDV check by IDVC token that supports filtering, sorting, and
     * pagination through existing mechanisms.
     * @param  userToken  Required parameter: Auto-generated unique identifier representing a user,
     *         prefixed with &lt;i&gt;user-&lt;/i&gt;.
     * @param  idvcToken  Required parameter: Auto-generated unique identifier representing a user
     *         IDV check, prefixed with &lt;i&gt;idvc-&lt;/i&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @return    Returns the IdentityVerificationResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public IdentityVerificationResponse retrieveUserIDVCheck(
            final String userToken,
            final String idvcToken,
            final String xMyPayQuickerVersion) throws ApiException, IOException {
        HttpRequest request = buildRetrieveUserIDVCheckRequest(userToken, idvcToken,
                xMyPayQuickerVersion);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleRetrieveUserIDVCheckResponse(context);
    }

    /**
     * Retrieve a list of all IDV check by IDVC token that supports filtering, sorting, and
     * pagination through existing mechanisms.
     * @param  userToken  Required parameter: Auto-generated unique identifier representing a user,
     *         prefixed with &lt;i&gt;user-&lt;/i&gt;.
     * @param  idvcToken  Required parameter: Auto-generated unique identifier representing a user
     *         IDV check, prefixed with &lt;i&gt;idvc-&lt;/i&gt;.
     * @param  xMyPayQuickerVersion  Required parameter: Date-based API Version specified in the
     *         header &lt;i&gt;required&lt;/i&gt; on all calls.
     * @return    Returns the IdentityVerificationResponse response from the API call
     */
    public CompletableFuture<IdentityVerificationResponse> retrieveUserIDVCheckAsync(
            final String userToken,
            final String idvcToken,
            final String xMyPayQuickerVersion) {
        return makeHttpCallAsync(() -> buildRetrieveUserIDVCheckRequest(userToken, idvcToken,
                xMyPayQuickerVersion),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleRetrieveUserIDVCheckResponse(context));
    }

    /**
     * Builds the HttpRequest object for retrieveUserIDVCheck.
     */
    private HttpRequest buildRetrieveUserIDVCheckRequest(
            final String userToken,
            final String idvcToken,
            final String xMyPayQuickerVersion) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/users/{user-token}/idv-checks/{idvc-token}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("user-token",
                new SimpleEntry<Object, Boolean>(userToken, true));
        templateParameters.put("idvc-token",
                new SimpleEntry<Object, Boolean>(idvcToken, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("X-MyPayQuicker-Version", xMyPayQuickerVersion);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for retrieveUserIDVCheck.
     * @return An object of type IdentityVerificationResponse
     */
    private IdentityVerificationResponse handleRetrieveUserIDVCheckResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        IdentityVerificationResponse result = ApiHelper.deserialize(responseBody,
                IdentityVerificationResponse.class);

        return result;
    }

    /**
     * Retrieve a list of all user events that supports filtering, sorting, and pagination through
     * existing mechanisms.
     * @param  userToken  Required parameter: Auto-generated unique identifier representing a user,
     *         prefixed with &lt;i&gt;user-&lt;/i&gt;.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void listUserEvents(
            final String userToken) throws ApiException, IOException {
        HttpRequest request = buildListUserEventsRequest(userToken);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        handleListUserEventsResponse(context);
    }

    /**
     * Retrieve a list of all user events that supports filtering, sorting, and pagination through
     * existing mechanisms.
     * @param  userToken  Required parameter: Auto-generated unique identifier representing a user,
     *         prefixed with &lt;i&gt;user-&lt;/i&gt;.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> listUserEventsAsync(
            final String userToken) {
        return makeHttpCallAsync(() -> buildListUserEventsRequest(userToken),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleListUserEventsResponse(context));
    }

    /**
     * Builds the HttpRequest object for listUserEvents.
     */
    private HttpRequest buildListUserEventsRequest(
            final String userToken) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/users/{user-token}/events");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("user-token",
                new SimpleEntry<Object, Boolean>(userToken, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for listUserEvents.
     * @return An object of type void
     */
    private Void handleListUserEventsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        return null;
    }

    /**
     * Retrieve a single user event.
     * @param  userToken  Required parameter: Auto-generated unique identifier representing a user,
     *         prefixed with &lt;i&gt;user-&lt;/i&gt;.
     * @param  evntToken  Required parameter: Auto-generated unique identifier representing an
     *         event, prefixed with &lt;i&gt;evnt-&lt;/i&gt;.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void retrieveUserEvent(
            final String userToken,
            final String evntToken) throws ApiException, IOException {
        HttpRequest request = buildRetrieveUserEventRequest(userToken, evntToken);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        handleRetrieveUserEventResponse(context);
    }

    /**
     * Retrieve a single user event.
     * @param  userToken  Required parameter: Auto-generated unique identifier representing a user,
     *         prefixed with &lt;i&gt;user-&lt;/i&gt;.
     * @param  evntToken  Required parameter: Auto-generated unique identifier representing an
     *         event, prefixed with &lt;i&gt;evnt-&lt;/i&gt;.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> retrieveUserEventAsync(
            final String userToken,
            final String evntToken) {
        return makeHttpCallAsync(() -> buildRetrieveUserEventRequest(userToken, evntToken),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleRetrieveUserEventResponse(context));
    }

    /**
     * Builds the HttpRequest object for retrieveUserEvent.
     */
    private HttpRequest buildRetrieveUserEventRequest(
            final String userToken,
            final String evntToken) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/users/{user-token}/events/{evnt-token}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("user-token",
                new SimpleEntry<Object, Boolean>(userToken, true));
        templateParameters.put("evnt-token",
                new SimpleEntry<Object, Boolean>(evntToken, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for retrieveUserEvent.
     * @return An object of type void
     */
    private Void handleRetrieveUserEventResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        return null;
    }

    /**
     * Accept a single program agreement.
     * @param  userToken  Required parameter: Auto-generated unique identifier representing a user,
     *         prefixed with &lt;i&gt;user-&lt;/i&gt;.
     * @param  agmtToken  Required parameter: Auto-generated unique identifier representing a
     *         program agreement, prefixed with &lt;i&gt;agmt-&lt;/i&gt;.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void acceptProgramAgreement(
            final String userToken,
            final String agmtToken) throws ApiException, IOException {
        HttpRequest request = buildAcceptProgramAgreementRequest(userToken, agmtToken);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        handleAcceptProgramAgreementResponse(context);
    }

    /**
     * Accept a single program agreement.
     * @param  userToken  Required parameter: Auto-generated unique identifier representing a user,
     *         prefixed with &lt;i&gt;user-&lt;/i&gt;.
     * @param  agmtToken  Required parameter: Auto-generated unique identifier representing a
     *         program agreement, prefixed with &lt;i&gt;agmt-&lt;/i&gt;.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> acceptProgramAgreementAsync(
            final String userToken,
            final String agmtToken) {
        return makeHttpCallAsync(() -> buildAcceptProgramAgreementRequest(userToken, agmtToken),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleAcceptProgramAgreementResponse(context));
    }

    /**
     * Builds the HttpRequest object for acceptProgramAgreement.
     */
    private HttpRequest buildAcceptProgramAgreementRequest(
            final String userToken,
            final String agmtToken) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/users/{user-token}/agreements/{agmt-token}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("user-token",
                new SimpleEntry<Object, Boolean>(userToken, true));
        templateParameters.put("agmt-token",
                new SimpleEntry<Object, Boolean>(agmtToken, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().post(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for acceptProgramAgreement.
     * @return An object of type void
     */
    private Void handleAcceptProgramAgreementResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        return null;
    }

    /**
     * Retrieve a list of all accepted program agreements that supports filtering, sorting, and
     * pagination through existing mechanisms.
     * @param  userToken  Required parameter: Auto-generated unique identifier representing a user,
     *         prefixed with &lt;i&gt;user-&lt;/i&gt;.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void listAcceptedProgramAgreements(
            final String userToken) throws ApiException, IOException {
        HttpRequest request = buildListAcceptedProgramAgreementsRequest(userToken);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        handleListAcceptedProgramAgreementsResponse(context);
    }

    /**
     * Retrieve a list of all accepted program agreements that supports filtering, sorting, and
     * pagination through existing mechanisms.
     * @param  userToken  Required parameter: Auto-generated unique identifier representing a user,
     *         prefixed with &lt;i&gt;user-&lt;/i&gt;.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> listAcceptedProgramAgreementsAsync(
            final String userToken) {
        return makeHttpCallAsync(() -> buildListAcceptedProgramAgreementsRequest(userToken),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleListAcceptedProgramAgreementsResponse(context));
    }

    /**
     * Builds the HttpRequest object for listAcceptedProgramAgreements.
     */
    private HttpRequest buildListAcceptedProgramAgreementsRequest(
            final String userToken) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/users/{user-token}/agreements");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("user-token",
                new SimpleEntry<Object, Boolean>(userToken, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for listAcceptedProgramAgreements.
     * @return An object of type void
     */
    private Void handleListAcceptedProgramAgreementsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        return null;
    }

}