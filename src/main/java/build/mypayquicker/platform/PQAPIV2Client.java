/*
 * PQAPIV2Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package build.mypayquicker.platform;

import build.mypayquicker.platform.controllers.BalancesController;
import build.mypayquicker.platform.controllers.BankAccountsController;
import build.mypayquicker.platform.controllers.DocumentsController;
import build.mypayquicker.platform.controllers.PaperChecksController;
import build.mypayquicker.platform.controllers.PaymentsController;
import build.mypayquicker.platform.controllers.PrepaidCardsController;
import build.mypayquicker.platform.controllers.ProgramController;
import build.mypayquicker.platform.controllers.ReceiptsController;
import build.mypayquicker.platform.controllers.SpendBackController;
import build.mypayquicker.platform.controllers.TransfersController;
import build.mypayquicker.platform.controllers.UsersController;
import build.mypayquicker.platform.controllers.WebhooksController;
import build.mypayquicker.platform.http.client.HttpCallback;
import build.mypayquicker.platform.http.client.HttpClient;
import build.mypayquicker.platform.http.client.HttpClientConfiguration;
import build.mypayquicker.platform.http.client.OkClient;
import build.mypayquicker.platform.http.client.ReadonlyHttpClientConfiguration;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Consumer;

/**
 * Gateway class for the library.
 * This class acts as a factory for Controllers.
 * It holds the state of the SDK.
 */
public final class PQAPIV2Client implements Configuration {

    /**
     * Private store for controllers.
     */
    private PaymentsController payments;
    private TransfersController transfers;
    private SpendBackController spendBack;
    private PrepaidCardsController prepaidCards;
    private PaperChecksController paperChecks;
    private BankAccountsController bankAccounts;
    private BalancesController balances;
    private ReceiptsController receipts;
    private UsersController users;
    private DocumentsController documents;
    private WebhooksController webhooks;
    private ProgramController program;

    /**
     * Current API environment.
     */
    private final Environment environment;

    /**
     * The HTTP Client instance to use for making HTTP requests.
     */
    private final HttpClient httpClient;

    /**
     * Http Client Configuration instance.
     */
    private final ReadonlyHttpClientConfiguration httpClientConfig;

    /**
     * Map of authentication Managers.
     */
    private Map<String, AuthManager> authManagers;

    /**
     * Callback to be called before and after the HTTP call for an endpoint is made.
     */
    private final HttpCallback httpCallback;

    private PQAPIV2Client(Environment environment, HttpClient httpClient,
            ReadonlyHttpClientConfiguration httpClientConfig, Map<String, AuthManager> authManagers,
            HttpCallback httpCallback) {
        this.environment = environment;
        this.httpClient = httpClient;
        this.httpClientConfig = httpClientConfig;
        this.httpCallback = httpCallback;

        this.authManagers = (authManagers == null) ? new HashMap<>() : new HashMap<>(authManagers);


        payments = new PaymentsController(this, this.httpClient, this.authManagers,
                this.httpCallback);
        transfers = new TransfersController(this, this.httpClient, this.authManagers,
                this.httpCallback);
        spendBack = new SpendBackController(this, this.httpClient, this.authManagers,
                this.httpCallback);
        prepaidCards = new PrepaidCardsController(this, this.httpClient, this.authManagers,
                this.httpCallback);
        paperChecks = new PaperChecksController(this, this.httpClient, this.authManagers,
                this.httpCallback);
        bankAccounts = new BankAccountsController(this, this.httpClient, this.authManagers,
                this.httpCallback);
        balances = new BalancesController(this, this.httpClient, this.authManagers,
                this.httpCallback);
        receipts = new ReceiptsController(this, this.httpClient, this.authManagers,
                this.httpCallback);
        users = new UsersController(this, this.httpClient, this.authManagers, this.httpCallback);
        documents = new DocumentsController(this, this.httpClient, this.authManagers,
                this.httpCallback);
        webhooks = new WebhooksController(this, this.httpClient, this.authManagers,
                this.httpCallback);
        program = new ProgramController(this, this.httpClient, this.authManagers,
                this.httpCallback);
    }

    /**
     * Shutdown the underlying HttpClient instance.
     */
    public static void shutdown() {
        OkClient.shutdown();
    }

    /**
     * Get the instance of PaymentsController.
     * @return payments
     */
    public PaymentsController getPaymentsController() {
        return payments;
    }

    /**
     * Get the instance of TransfersController.
     * @return transfers
     */
    public TransfersController getTransfersController() {
        return transfers;
    }

    /**
     * Get the instance of SpendBackController.
     * @return spendBack
     */
    public SpendBackController getSpendBackController() {
        return spendBack;
    }

    /**
     * Get the instance of PrepaidCardsController.
     * @return prepaidCards
     */
    public PrepaidCardsController getPrepaidCardsController() {
        return prepaidCards;
    }

    /**
     * Get the instance of PaperChecksController.
     * @return paperChecks
     */
    public PaperChecksController getPaperChecksController() {
        return paperChecks;
    }

    /**
     * Get the instance of BankAccountsController.
     * @return bankAccounts
     */
    public BankAccountsController getBankAccountsController() {
        return bankAccounts;
    }

    /**
     * Get the instance of BalancesController.
     * @return balances
     */
    public BalancesController getBalancesController() {
        return balances;
    }

    /**
     * Get the instance of ReceiptsController.
     * @return receipts
     */
    public ReceiptsController getReceiptsController() {
        return receipts;
    }

    /**
     * Get the instance of UsersController.
     * @return users
     */
    public UsersController getUsersController() {
        return users;
    }

    /**
     * Get the instance of DocumentsController.
     * @return documents
     */
    public DocumentsController getDocumentsController() {
        return documents;
    }

    /**
     * Get the instance of WebhooksController.
     * @return webhooks
     */
    public WebhooksController getWebhooksController() {
        return webhooks;
    }

    /**
     * Get the instance of ProgramController.
     * @return program
     */
    public ProgramController getProgramController() {
        return program;
    }

    /**
     * Current API environment.
     * @return environment
     */
    public Environment getEnvironment() {
        return environment;
    }

    /**
     * The HTTP Client instance to use for making HTTP requests.
     * @return httpClient
     */
    private HttpClient getHttpClient() {
        return httpClient;
    }

    /**
     * Http Client Configuration instance.
     * @return httpClientConfig
     */
    public ReadonlyHttpClientConfiguration getHttpClientConfig() {
        return httpClientConfig;
    }

    /**
     * The timeout to use for making HTTP requests.
     * @deprecated This method will be removed in a future version. Use
     *             {@link #getHttpClientConfig()} instead.
     *
     * @return timeout
     */
    @Deprecated
    public long timeout() {
        return httpClientConfig.getTimeout();
    }

    /**
     * Get base URI by current environment.
     * @param server Server for which to get the base URI
     * @return Processed base URI
     */
    public String getBaseUri(Server server) {
        Map<String, SimpleEntry<Object, Boolean>> parameters = new HashMap<>();
        StringBuilder baseUrl = new StringBuilder(environmentMapper(environment, server));
        ApiHelper.appendUrlWithTemplateParameters(baseUrl, parameters);
        return baseUrl.toString();
    }

    /**
     * Get base URI by current environment.
     * @return Processed base URI
     */
    public String getBaseUri() {
        return getBaseUri(Server.ENUM_DEFAULT);
    }

    /**
     * Base URLs by environment and server aliases.
     * @param environment Environment for which to get the base URI
     * @param server Server for which to get the base URI
     * @return base URL
     */
    private static String environmentMapper(Environment environment, Server server) {
        if (environment.equals(Environment.PRODUCTION)) {
            if (server.equals(Server.ENUM_DEFAULT)) {
                return "https://platform.mypayquicker.build/api/v2";
            }
            if (server.equals(Server.ACCESS_TOKEN_SERVER)) {
                return "https://identity.mypayquicker.build/core/connect";
            }
        }
        return "https://platform.mypayquicker.build/api/v2";
    }

    /**
     * Converts this PQAPIV2Client into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "PQAPIV2Client [" + "environment=" + environment + ", httpClientConfig="
                + httpClientConfig + ", authManagers=" + authManagers + "]";
    }

    /**
     * Builds a new {@link PQAPIV2Client.Builder} object.
     * Creates the instance with the state of the current client.
     * @return a new {@link PQAPIV2Client.Builder} object
     */
    public Builder newBuilder() {
        Builder builder = new Builder();
        builder.environment = getEnvironment();
        builder.httpClient = getHttpClient();
        builder.authManagers = authManagers;
        builder.httpCallback = httpCallback;
        builder.httpClientConfig(configBldr -> configBldr =
                ((HttpClientConfiguration) httpClientConfig).newBuilder());
        return builder;
    }

    /**
     * Class to build instances of {@link PQAPIV2Client}.
     */
    public static class Builder {

        private Environment environment = Environment.PRODUCTION;
        private HttpClient httpClient;
        private Map<String, AuthManager> authManagers = null;
        private HttpCallback httpCallback = null;
        private HttpClientConfiguration.Builder httpClientConfigBuilder =
                new HttpClientConfiguration.Builder();


        /**
         * Current API environment.
         * @param environment The environment for client.
         * @return Builder
         */
        public Builder environment(Environment environment) {
            this.environment = environment;
            return this;
        }

        /**
         * The timeout to use for making HTTP requests.
         * @deprecated This method will be removed in a future version. Use
         *             {@link #httpClientConfig(Consumer) httpClientConfig} instead.
         * @param timeout must be greater then 0.
         * @return Builder
         */
        @Deprecated
        public Builder timeout(long timeout) {
            this.httpClientConfigBuilder.timeout(timeout);
            return this;
        }

        /**
         * HttpCallback.
         * @param httpCallback Callback to be called before and after the HTTP call.
         * @return Builder
         */
        public Builder httpCallback(HttpCallback httpCallback) {
            this.httpCallback = httpCallback;
            return this;
        }

        /**
         * Setter for the Builder of httpClientConfiguration, takes in an operation to be performed
         * on the builder instance of HTTP client configuration.
         * 
         * @param action Consumer for the builder of httpClientConfiguration.
         * @return Builder
         */
        public Builder httpClientConfig(Consumer<HttpClientConfiguration.Builder> action) {
            action.accept(httpClientConfigBuilder);
            return this;
        }

        /**
         * Builds a new PQAPIV2Client object using the set fields.
         * @return PQAPIV2Client
         */
        public PQAPIV2Client build() {
            HttpClientConfiguration httpClientConfig = httpClientConfigBuilder.build();
            httpClient = new OkClient(httpClientConfig);

            return new PQAPIV2Client(environment, httpClient, httpClientConfig, authManagers,
                    httpCallback);
        }
    }
}