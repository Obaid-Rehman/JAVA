/*
 * PQAPIV2Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package build.mypayquicker.platform.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import build.mypayquicker.platform.ApiHelper;
import build.mypayquicker.platform.PQAPIV2Client;
import build.mypayquicker.platform.exceptions.ApiException;
import build.mypayquicker.platform.models.BalanceCollectionResponse;
import build.mypayquicker.platform.models.LanguageTypesEnum;
import build.mypayquicker.platform.testing.TestHelper;
import java.util.LinkedHashMap;
import java.util.Map;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class BalancesControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static PQAPIV2Client client;
    
    /**
     * Controller instance (for all tests).
     */
    private static BalancesController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getBalancesController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * Retrieve a list of user balances that supports filtering, sorting, and pagination through
     * existing mechanisms.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestListUserBalances() throws Exception {
        // Parameters for the API call
        String userToken = 
                "user-f012bc86-4d42-415b-a8b2-be5e0b90e59a";
        String xMyPayQuickerVersion = 
                "2020.02.24";
        Integer page = null;
        Integer pageSize = 20;
        String filter = 
                "'name'*'Fra'||*'Ger','numericCode'>'5'";
        String sort = 
                "-name";
        LanguageTypesEnum language = LanguageTypesEnum.fromString(
                "en-US");

        // Set callback and perform API call
        BalanceCollectionResponse result = null;
        try {
            result = controller.listUserBalances(userToken, xMyPayQuickerVersion, page, pageSize, filter, sort, language);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"payload\":[{\"formattedAmount\":\"$4.32 USD\",\"amount\":4.32,\"currency\":\"US"
                + "D\",\"token\":\"dest-4aed86e2-4929-45bf-814d-9030aef21e79\",\"links\":[{\"params"
                + "\":{\"rel\":\"self\"},\"href\":\"https://platform.mypayquicker.com/api/v2/users/"
                + "user-f012bc86-4d42-415b-a8b2-be5e0b90e59a/prepaid-cards/dest-4aed86e2-4929-45bf-"
                + "814d-9030aef21e79/balances\"}]}],\"links\":[{\"params\":{\"rel\":\"self\"},\"hre"
                + "f\":\"https://platform.mypayquicker.com/api/v2/users/user-f012bc86-4d42-415b-a8b"
                + "2-be5e0b90e59a/balances\"}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * Retrieve a list of balances by destination token that supports filtering, sorting, and
     * pagination through existing mechanisms. &lt;i&gt;*If the user belongs to a Flex-based program,
     * balances against the user resource will return the wallet balance only. If it is a pre-paid
     * card program (i.e., Meta USD), this balance and its associated pre-paid card balance will be
     * the same.&lt;/i&gt;.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestListPrepaidCardBalance() throws Exception {
        // Parameters for the API call
        String userToken = 
                "user-f012bc86-4d42-415b-a8b2-be5e0b90e59a";
        String destToken = 
                "dest-4aed86e2-4929-45bf-814d-9030aef21e79";
        String xMyPayQuickerVersion = 
                "2020.02.24";
        Integer page = null;
        Integer pageSize = 20;
        String filter = 
                "'name'*'Fra'||*'Ger','numericCode'>'5'";
        String sort = 
                "-name";
        LanguageTypesEnum language = LanguageTypesEnum.fromString(
                "en-US");

        // Set callback and perform API call
        BalanceCollectionResponse result = null;
        try {
            result = controller.listPrepaidCardBalance(userToken, destToken, xMyPayQuickerVersion, page, pageSize, filter, sort, language);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"formattedAmount\":\"$4.32\",\"amount\":4.32,\"currency\":\"USD\",\"token\":\"de"
                + "st-4aed86e2-4929-45bf-814d-9030aef21e79\",\"links\":[{\"params\":{\"rel\":\"self"
                + "\"},\"href\":\"https://platform.mypayquicker.com/api/v2/users/user-f012bc86-4d42"
                + "-415b-a8b2-be5e0b90e59a/prepaid-cards/dest-4aed86e2-4929-45bf-814d-9030aef21e79/"
                + "balances\"}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * Retrieve a single account balance.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestListAccountBalances() throws Exception {
        // Parameters for the API call
        String acctToken = 
                "acct-b3f0570a-6586-4e00-8d6e-8a2bf93cfae4";
        String xMyPayQuickerVersion = 
                "2020.02.24";
        Integer page = null;
        Integer pageSize = 20;
        String filter = 
                "'name'*'Fra'||*'Ger','numericCode'>'5'";
        String sort = 
                "-name";
        LanguageTypesEnum language = LanguageTypesEnum.fromString(
                "en-US");

        // Set callback and perform API call
        BalanceCollectionResponse result = null;
        try {
            result = controller.listAccountBalances(acctToken, xMyPayQuickerVersion, page, pageSize, filter, sort, language);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"payload\":[{\"formattedAmount\":\"$5.00\",\"amount\":5,\"currency\":\"USD\",\"t"
                + "oken\":\"acct-b3f0570a-6586-4e00-8d6e-8a2bf93cfae4\"}],\"links\":[{\"params\":{"
                + "\"rel\":\"self\"},\"href\":\"https://platform.mypayquicker.com/api/v2/accounts/a"
                + "cct-b3f0570a-6586-4e00-8d6e-8a2bf93cfae4/balances\"}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

}
