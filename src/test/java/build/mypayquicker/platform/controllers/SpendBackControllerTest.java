/*
 * PQAPIV2Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package build.mypayquicker.platform.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import build.mypayquicker.platform.ApiHelper;
import build.mypayquicker.platform.PQAPIV2Client;
import build.mypayquicker.platform.exceptions.ApiException;
import build.mypayquicker.platform.models.LanguageTypesEnum;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class SpendBackControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static PQAPIV2Client client;
    
    /**
     * Controller instance (for all tests).
     */
    private static SpendBackController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getSpendBackController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * Retrieve a single spendback quote using the spendback token.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestRetrieveSpendback() throws Exception {
        // Parameters for the API call
        String spndToken = 
                "spnd-c39437e1-dc80-4293-8211-c14b5a32f762";
        String xMyPayQuickerVersion = 
                "2020.02.24";
        Integer page = null;
        Integer pageSize = 20;
        String filter = 
                "'name'*'Fra'||*'Ger','numericCode'>'5'";
        String sort = 
                "-name";
        LanguageTypesEnum language = LanguageTypesEnum.fromString(
                "en-US");

        // Set callback and perform API call
        try {
            controller.retrieveSpendback(spndToken, xMyPayQuickerVersion, page, pageSize, filter, sort, language);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

    }

    /**
     * Accept an open spendback quote.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestAcceptSpendbackQuote() throws Exception {
        // Parameters for the API call
        String spndToken = 
                "spnd-c39437e1-dc80-4293-8211-c14b5a32f762";
        String xMyPayQuickerVersion = 
                "2020.02.24";

        // Set callback and perform API call
        try {
            controller.acceptSpendbackQuote(spndToken, xMyPayQuickerVersion);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

    }

    /**
     * Cancel an open spendback quote.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestCancelSpendbackQuote() throws Exception {
        // Parameters for the API call
        String spndToken = 
                "spnd-c39437e1-dc80-4293-8211-c14b5a32f762";
        String xMyPayQuickerVersion = 
                "2020.02.24";

        // Set callback and perform API call
        try {
            controller.cancelSpendbackQuote(spndToken, xMyPayQuickerVersion);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

    }

    /**
     * Perform a spendback refund for the full amount.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestRefundSpendbackFull() throws Exception {
        // Parameters for the API call
        String spndToken = 
                "spnd-c39437e1-dc80-4293-8211-c14b5a32f762";
        String xMyPayQuickerVersion = 
                "2020.02.24";

        // Set callback and perform API call
        try {
            controller.refundSpendbackFull(spndToken, xMyPayQuickerVersion);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

    }

    /**
     * Perform a spendback refund for a partial amount.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestRefundSpendbackPartial() throws Exception {
        // Parameters for the API call
        String spndToken = 
                "spnd-c39437e1-dc80-4293-8211-c14b5a32f762";
        String xMyPayQuickerVersion = 
                "2020.02.24";

        // Set callback and perform API call
        try {
            controller.refundSpendbackPartial(spndToken, xMyPayQuickerVersion);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

    }

    /**
     * Retrieve a list of all spendbacks that supports filtering, sorting, and pagination through
     * existing mechanisms.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestListSpendBacks() throws Exception {
        // Parameters for the API call
        String xMyPayQuickerVersion = 
                "2020.02.24";
        Integer page = null;
        Integer pageSize = 20;
        String filter = 
                "'name'*'Fra'||*'Ger','numericCode'>'5'";
        String sort = 
                "-name";
        LanguageTypesEnum language = LanguageTypesEnum.fromString(
                "en-US");

        // Set callback and perform API call
        try {
            controller.listSpendBacks(xMyPayQuickerVersion, page, pageSize, filter, sort, language);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

    }

    /**
     * Create a spendback quote. &lt;i&gt;*Spendbacks can be automatically accepted by setting the
     * `autoAcceptQuote` flag. If not automatically accepted, a POST is required to the spendback
     * endpoint using the token returned in the response. Quotes can be accepted, cancelled, or
     * allowed to expire.&lt;/i&gt;.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestQuoteSpendback() throws Exception {
        // Parameters for the API call
        String xMyPayQuickerVersion = 
                "2020.02.24";
        Object body = null;

        // Set callback and perform API call
        try {
            controller.quoteSpendback(xMyPayQuickerVersion, body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

    }

}
