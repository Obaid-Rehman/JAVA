/*
 * PQAPIV2Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package build.mypayquicker.platform.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import build.mypayquicker.platform.ApiHelper;
import build.mypayquicker.platform.PQAPIV2Client;
import build.mypayquicker.platform.exceptions.ApiException;
import build.mypayquicker.platform.models.LanguageTypesEnum;
import build.mypayquicker.platform.models.PrepaidCardBase;
import build.mypayquicker.platform.models.PrepaidCardCollectionResponse;
import build.mypayquicker.platform.models.PrepaidCardRequestResponse;
import build.mypayquicker.platform.models.PrepaidCardResponse;
import build.mypayquicker.platform.models.PrepaidCardStatus;
import build.mypayquicker.platform.testing.TestHelper;
import java.util.LinkedHashMap;
import java.util.Map;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class PrepaidCardsControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static PQAPIV2Client client;
    
    /**
     * Controller instance (for all tests).
     */
    private static PrepaidCardsController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getPrepaidCardsController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * Replace an existing Prepaid Card specifying the replacement reason and the card package for
     * the replacement card.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestReplacePrepaidCard() throws Exception {
        // Parameters for the API call
        String userToken = 
                "user-f012bc86-4d42-415b-a8b2-be5e0b90e59a";
        String destToken = 
                "dest-4aed86e2-4929-45bf-814d-9030aef21e79";
        String xMyPayQuickerVersion = 
                "2020.02.24";
        Object body = null;

        // Set callback and perform API call
        PrepaidCardResponse result = null;
        try {
            result = controller.replacePrepaidCard(userToken, destToken, xMyPayQuickerVersion, body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"token\":\"dest-37ba1fb7-6136-4216-bb13-f903af6b9f0d\",\"status\":\"QUEUED\",\"c"
                + "reatedOn\":\"2020-02-21T22:00:00Z\",\"country\":\"US\",\"currency\":\"USD\",\"ca"
                + "rdPersonalization\":\"PERSONALIZED\",\"cardPackage\":\"blue_consumer_10k\",\"car"
                + "dNetwork\":\"VISA\",\"expires\":\"2023-02-21T00:00:00Z\",\"cardNumber\":\"1234 5"
                + "6** **** 1234\",\"cvv\":\"123\",\"links\":[{\"params\":{\"rel\":\"self\"},\"href"
                + "\":\"https://platform.mypayquicker.com/api/v2/users/xxx/prepaid-cards/dest-37ba1"
                + "fb7-6136-4216-bb13-f903af6b9f0d\"}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * Retrieve Prepaid Card details by destination token.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestRetrievePrepaidCard() throws Exception {
        // Parameters for the API call
        String userToken = 
                "user-f012bc86-4d42-415b-a8b2-be5e0b90e59a";
        String destToken = 
                "dest-4aed86e2-4929-45bf-814d-9030aef21e79";
        String xMyPayQuickerVersion = 
                "2020.02.24";

        // Set callback and perform API call
        PrepaidCardResponse result = null;
        try {
            result = controller.retrievePrepaidCard(userToken, destToken, xMyPayQuickerVersion);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"token\":\"dest-37ba1fb7-6136-4216-bb13-f903af6b9f0d\",\"status\":\"QUEUED\",\"c"
                + "reatedOn\":\"2020-02-21T22:00:00Z\",\"country\":\"US\",\"currency\":\"USD\",\"ca"
                + "rdPersonalization\":\"PERSONALIZED\",\"cardPackage\":\"blue_consumer_10k\",\"car"
                + "dNetwork\":\"VISA\",\"expires\":\"2023-02-21T00:00:00Z\",\"cardNumber\":\"1234 5"
                + "6** **** 1234\",\"cvv\":\"123\",\"links\":[{\"params\":{\"rel\":\"self\"},\"href"
                + "\":\"https://platform.mypayquicker.com/api/v2/users/xxx/prepaid-cards/dest-37ba1"
                + "fb7-6136-4216-bb13-f903af6b9f0d\"}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * Partial Prepaid Card update typically used when modifying card status. &lt;i&gt;*Does not require
     * the entire object be passed in the request&lt;/i&gt;.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestUpdatePrepaidCardPartial() throws Exception {
        // Parameters for the API call
        String userToken = 
                "user-f012bc86-4d42-415b-a8b2-be5e0b90e59a";
        String destToken = 
                "dest-4aed86e2-4929-45bf-814d-9030aef21e79";
        String xMyPayQuickerVersion = 
                "2020.02.24";
        PrepaidCardStatus body = null;

        // Set callback and perform API call
        PrepaidCardResponse result = null;
        try {
            result = controller.updatePrepaidCardPartial(userToken, destToken, xMyPayQuickerVersion, body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"token\":\"dest-37ba1fb7-6136-4216-bb13-f903af6b9f0d\",\"status\":\"LOCKED\",\"c"
                + "reatedOn\":\"2020-02-21T22:00:00Z\",\"country\":\"US\",\"currency\":\"USD\",\"ca"
                + "rdPersonalization\":\"PERSONALIZED\",\"cardPackage\":\"blue_consumer_10k\",\"car"
                + "dNetwork\":\"VISA\",\"expires\":\"2023-02-21T00:00:00Z\",\"cardNumber\":\"1234 5"
                + "6** **** 1234\",\"cvv\":\"123\",\"links\":[{\"params\":{\"rel\":\"self\"},\"href"
                + "\":\"https://platform.mypayquicker.com/api/v2/users/xxx/prepaid-cards/dest-37ba1"
                + "fb7-6136-4216-bb13-f903af6b9f0d\"}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * Retrieve one part of a two-part token required to reveal or set a client side PIN. &lt;i&gt;*Not
     * all programs support a reveal or set PIN operation.&lt;/i&gt;.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestGeneratePINOperationToken() throws Exception {
        // Parameters for the API call
        String userToken = 
                "user-f012bc86-4d42-415b-a8b2-be5e0b90e59a";
        String destToken = 
                "dest-4aed86e2-4929-45bf-814d-9030aef21e79";
        String xMyPayQuickerVersion = 
                "2020.02.24";

        // Set callback and perform API call
        try {
            controller.generatePINOperationToken(userToken, destToken, xMyPayQuickerVersion);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

    }

    /**
     * Retrieve a list of all pre-paid cards by user token that supports filtering, sorting, and
     * pagination through existing mechanisms.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestListPrepaidCards() throws Exception {
        // Parameters for the API call
        String userToken = 
                "user-f012bc86-4d42-415b-a8b2-be5e0b90e59a";
        String xMyPayQuickerVersion = 
                "2020.02.24";
        Integer page = null;
        Integer pageSize = 20;
        String filter = 
                "'name'*'Fra'||*'Ger','numericCode'>'5'";
        String sort = 
                "-name";
        LanguageTypesEnum language = LanguageTypesEnum.fromString(
                "en-US");

        // Set callback and perform API call
        PrepaidCardCollectionResponse result = null;
        try {
            result = controller.listPrepaidCards(userToken, xMyPayQuickerVersion, page, pageSize, filter, sort, language);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"payload\":[{\"token\":\"dest-37ba1fb7-6136-4216-bb13-f903af6b9f0d\",\"status\":"
                + "\"QUEUED\",\"createdOn\":\"2020-02-21T22:00:00Z\",\"country\":\"US\",\"currency"
                + "\":\"USD\",\"cardPersonalization\":\"PERSONALIZED\",\"cardPackage\":\"blue_consu"
                + "mer_10k\",\"cardNetwork\":\"VISA\",\"expires\":\"2023-02-21T00:00:00Z\",\"cardNu"
                + "mber\":\"1234 56** **** 1234\",\"cvv\":\"123\",\"links\":[{\"params\":{\"rel\":"
                + "\"self\"},\"href\":\"https://platform.mypayquicker.com/api/v2/users/xxx/prepaid-"
                + "cards/dest-37ba1fb7-6136-4216-bb13-f903af6b9f0d\"}]}],\"links\":[{\"params\":{"
                + "\"rel\":\"self\"},\"href\":\"https://platform.mypayquicker.com/api/v2/users/xxx/"
                + "prepaid-cards\"}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * Order a pre-paid card for the user by specifying a cardPackage. &lt;i&gt;*A package defines the
     * type of card, currency, artwork utilized, and often the method of delivery.&lt;/i&gt;.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestOrderPrepaidCard() throws Exception {
        // Parameters for the API call
        String userToken = 
                "user-f012bc86-4d42-415b-a8b2-be5e0b90e59a";
        String xMyPayQuickerVersion = 
                "2020.02.24";
        PrepaidCardBase body = null;

        // Set callback and perform API call
        PrepaidCardRequestResponse result = null;
        try {
            result = controller.orderPrepaidCard(userToken, xMyPayQuickerVersion, body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"token\":\"dest-37ba1fb7-6136-4216-bb13-f903af6b9f0d\",\"status\":\"QUEUED\",\"c"
                + "reatedOn\":\"2020-02-21T22:00:00Z\",\"country\":\"US\",\"currency\":\"USD\",\"ca"
                + "rdPersonalization\":\"PERSONALIZED\",\"cardPackage\":\"blue_consumer_10k\",\"car"
                + "dNetwork\":\"VISA\",\"expires\":\"2023-02-21T00:00:00Z\",\"cardNumber\":\"1234 5"
                + "6** **** 1234\",\"cvv\":\"123\",\"links\":[{\"params\":{\"rel\":\"self\"},\"href"
                + "\":\"https://platform.mypayquicker.com/api/v2/users/xxx/prepaid-cards/dest-37ba1"
                + "fb7-6136-4216-bb13-f903af6b9f0d\"}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

}
