/*
 * PQAPIV2Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package build.mypayquicker.platform.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import build.mypayquicker.platform.ApiHelper;
import build.mypayquicker.platform.PQAPIV2Client;
import build.mypayquicker.platform.exceptions.ApiException;
import build.mypayquicker.platform.models.IdentityVerificationCollectionResponse;
import build.mypayquicker.platform.models.IdentityVerificationResponse;
import build.mypayquicker.platform.models.LanguageTypesEnum;
import build.mypayquicker.platform.models.UserBase;
import build.mypayquicker.platform.models.UserCollectionResponse;
import build.mypayquicker.platform.models.UserResponse;
import build.mypayquicker.platform.testing.TestHelper;
import java.util.LinkedHashMap;
import java.util.Map;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class UsersControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static PQAPIV2Client client;
    
    /**
     * Controller instance (for all tests).
     */
    private static UsersController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getUsersController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * Update a user object (change email, address change, etc.) using a user token.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestUpdateUser() throws Exception {
        // Parameters for the API call
        String userToken = 
                "user-f012bc86-4d42-415b-a8b2-be5e0b90e59a";
        String xMyPayQuickerVersion = 
                "2020.02.24";
        UserBase body = null;

        // Set callback and perform API call
        UserResponse result = null;
        try {
            result = controller.updateUser(userToken, xMyPayQuickerVersion, body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"firstName\":\"Jane\",\"lastName\":\"Smith\",\"dateOfBirth\":\"1977-12-14\",\"ph"
                + "oneNumber\":\"760-350-0324\",\"phoneNumberCountry\":\"US\",\"mobileNumber\":\"21"
                + "3-446-5755\",\"mobileNumberCountry\":\"US\",\"addressLine1\":\"290 Carriage Cour"
                + "t\",\"city\":\"Los Angeles\",\"region\":\"CA\",\"country\":\"US\",\"postalCode"
                + "\":\"90017\",\"addressType\":\"RESIDENTIAL\",\"email\":\"jsmith@payquicker.com"
                + "\",\"gender\":\"FEMALE\",\"userType\":\"INDIVIDUAL\",\"programUserId\":\"d97ce05"
                + "19b2d\",\"language\":\"en-US\",\"countryOfBirth\":\"US\",\"countryOfNationality"
                + "\":\"US\",\"token\":\"user-f012bc86-4d42-415b-a8b2-be5e0b90e59a\",\"status\":\"P"
                + "RE_ACTIVATED\",\"createdOn\":\"2020-02-24T22:00:00Z\",\"links\":[{\"params\":{"
                + "\"rel\":\"self\"},\"href\":\"https://platform.mypayquicker.com/api/v2/users/user"
                + "-f012bc86-4d42-415b-a8b2-be5e0b90e59a\"}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * Retrieve a single user record by user token.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestRetrieveUser() throws Exception {
        // Parameters for the API call
        String userToken = 
                "user-f012bc86-4d42-415b-a8b2-be5e0b90e59a";
        String xMyPayQuickerVersion = 
                "2020.02.24";

        // Set callback and perform API call
        UserResponse result = null;
        try {
            result = controller.retrieveUser(userToken, xMyPayQuickerVersion);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"firstName\":\"Jane\",\"lastName\":\"Smith\",\"dateOfBirth\":\"1977-12-14\",\"ph"
                + "oneNumber\":\"760-350-0324\",\"phoneNumberCountry\":\"US\",\"mobileNumber\":\"21"
                + "3-446-5755\",\"mobileNumberCountry\":\"US\",\"addressLine1\":\"290 Carriage Cour"
                + "t\",\"city\":\"Los Angeles\",\"region\":\"CA\",\"country\":\"US\",\"postalCode"
                + "\":\"90017\",\"addressType\":\"RESIDENTIAL\",\"email\":\"jsmith@payquicker.com"
                + "\",\"gender\":\"FEMALE\",\"userType\":\"INDIVIDUAL\",\"programUserId\":\"d97ce05"
                + "19b2d\",\"language\":\"en-US\",\"countryOfBirth\":\"US\",\"countryOfNationality"
                + "\":\"US\",\"token\":\"user-f012bc86-4d42-415b-a8b2-be5e0b90e59a\",\"status\":\"P"
                + "RE_ACTIVATED\",\"createdOn\":\"2020-02-24T22:00:00Z\",\"links\":[{\"params\":{"
                + "\"rel\":\"self\"},\"href\":\"https://platform.mypayquicker.com/api/v2/users/user"
                + "-f012bc86-4d42-415b-a8b2-be5e0b90e59a\"}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * Retrieve a list of all users that supports filtering, sorting, and pagination through
     * existing mechanisms.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestListUsers() throws Exception {
        // Parameters for the API call
        String xMyPayQuickerVersion = 
                "2020.02.24";
        Integer page = null;
        Integer pageSize = 20;
        String filter = 
                "'name'*'Fra'||*'Ger','numericCode'>'5'";
        String sort = 
                "-name";
        LanguageTypesEnum language = LanguageTypesEnum.fromString(
                "en-US");

        // Set callback and perform API call
        UserCollectionResponse result = null;
        try {
            result = controller.listUsers(xMyPayQuickerVersion, page, pageSize, filter, sort, language);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("X-TimeZone", TestHelper.nullString);
        headers.put("X-Paging-PageNo", TestHelper.nullString);
        headers.put("X-Paging-PageCount", TestHelper.nullString);
        headers.put("X-Paging-PageSize", TestHelper.nullString);
        headers.put("X-Paging-TotalRecordCount", TestHelper.nullString);
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"payload\":[{\"firstName\":\"Jane\",\"lastName\":\"Smith\",\"dateOfBirth\":\"197"
                + "7-12-14\",\"phoneNumber\":\"760-350-0324\",\"phoneNumberCountry\":\"US\",\"mobil"
                + "eNumber\":\"213-446-5755\",\"mobileNumberCountry\":\"US\",\"addressLine1\":\"290"
                + " Carriage Court\",\"city\":\"Los Angeles\",\"region\":\"CA\",\"country\":\"US\","
                + "\"postalCode\":\"90017\",\"addressType\":\"RESIDENTIAL\",\"email\":\"jsmith@payq"
                + "uicker.com\",\"gender\":\"FEMALE\",\"userType\":\"INDIVIDUAL\",\"programUserId"
                + "\":\"d97ce0519b2d\",\"language\":\"en-US\",\"countryOfBirth\":\"US\",\"countryOf"
                + "Nationality\":\"US\",\"token\":\"usr-3b8a0c25-c7e2-4bb7-904e-0a2a66001357\",\"st"
                + "atus\":\"PRE_ACTIVATED\",\"links\":[{\"params\":{\"rel\":\"self\"},\"href\":\"ht"
                + "tps://platform.mypayquicker.com/api/v2/users/usr-3b8a0c25-c7e2-4bb7-904e-0a2a660"
                + "01357\"}]}],\"links\":[{\"params\":{\"rel\":\"self\"},\"href\":\"https://platfor"
                + "m.mypayquicker.com/api/v2/users\"}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * Create a new user. Payload contains both required and optional fields for user- and
     * company-based users, allowing for the creation of a corporate/partnership/dba (i.e., Grubhub
     * model) user along with a standard end user (i.e., &lt;i&gt;Payee&lt;/i&gt;). The type of the user
     * (&lt;i&gt;Business&lt;/i&gt; vs. &lt;i&gt;User&lt;/i&gt;) and type of business (&lt;i&gt;Corporation&lt;/i&gt; vs.
     * &lt;i&gt;Partnership&lt;/i&gt;) provide context that impacts KYC etc.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestCreateUser() throws Exception {
        // Parameters for the API call
        String xMyPayQuickerVersion = 
                "2020.02.24";
        UserBase body = ApiHelper.deserialize(
                "{\"firstName\":\"Jane\",\"lastName\":\"Smith\",\"dateOfBirth\":\"1977-12-14\",\"ph"
                + "oneNumber\":\"760-350-0324\",\"phoneNumberCountry\":\"US\",\"mobileNumber\":\"21"
                + "3-446-5755\",\"mobileNumberCountry\":\"US\",\"addressLine1\":\"290 Carriage Cour"
                + "t\",\"city\":\"Los Angeles\",\"region\":\"CA\",\"country\":\"US\",\"postalCode"
                + "\":\"90017\",\"addressType\":\"RESIDENTIAL\",\"email\":\"jsmith@payquicker.com"
                + "\",\"gender\":\"FEMALE\",\"userType\":\"INDIVIDUAL\",\"programUserId\":\"d97ce05"
                + "19b2d\",\"language\":\"en-US\",\"countryOfBirth\":\"US\",\"countryOfNationality"
                + "\":\"US\"}",
                UserBase.class);

        // Set callback and perform API call
        UserResponse result = null;
        try {
            result = controller.createUser(xMyPayQuickerVersion, body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"firstName\":\"Jane\",\"lastName\":\"Smith\",\"dateOfBirth\":\"1977-12-14\",\"ph"
                + "oneNumber\":\"760-350-0324\",\"phoneNumberCountry\":\"US\",\"mobileNumber\":\"21"
                + "3-446-5755\",\"mobileNumberCountry\":\"US\",\"addressLine1\":\"290 Carriage Cour"
                + "t\",\"city\":\"Los Angeles\",\"region\":\"CA\",\"country\":\"US\",\"postalCode"
                + "\":\"90017\",\"addressType\":\"RESIDENTIAL\",\"email\":\"jsmith@payquicker.com"
                + "\",\"gender\":\"FEMALE\",\"userType\":\"INDIVIDUAL\",\"programUserId\":\"d97ce05"
                + "19b2d\",\"language\":\"en-US\",\"countryOfBirth\":\"US\",\"countryOfNationality"
                + "\":\"US\",\"token\":\"user-f012bc86-4d42-415b-a8b2-be5e0b90e59a\",\"status\":\"P"
                + "RE_ACTIVATED\",\"createdOn\":\"2020-02-24T22:00:00Z\",\"links\":[{\"params\":{"
                + "\"rel\":\"self\"},\"href\":\"https://platform.mypayquicker.com/api/v2/users/user"
                + "-f012bc86-4d42-415b-a8b2-be5e0b90e59a\"}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * Create a new user. Payload contains both required and optional fields for user- and
     * company-based users, allowing for the creation of a corporate/partnership/dba (i.e., Grubhub
     * model) user along with a standard end user (i.e., &lt;i&gt;Payee&lt;/i&gt;). The type of the user
     * (&lt;i&gt;Business&lt;/i&gt; vs. &lt;i&gt;User&lt;/i&gt;) and type of business (&lt;i&gt;Corporation&lt;/i&gt; vs.
     * &lt;i&gt;Partnership&lt;/i&gt;) provide context that impacts KYC etc.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestCreateUser1() throws Exception {
        // Parameters for the API call
        String xMyPayQuickerVersion = 
                "2020.02.24";
        UserBase body = ApiHelper.deserialize(
                "{\"firstName\":\"Jane\",\"lastName\":\"Smith\",\"dateOfBirth\":\"1977-12-14\",\"ph"
                + "oneNumber\":\"760-350-0324\",\"phoneNumberCountry\":\"US\",\"mobileNumber\":\"21"
                + "3-446-5755\",\"mobileNumberCountry\":\"US\",\"addressLine1\":\"290 Carriage Cour"
                + "t\",\"city\":\"Los Angeles\",\"region\":\"CA\",\"country\":\"US\",\"postalCode"
                + "\":\"90017\",\"addressType\":\"RESIDENTIAL\",\"email\":\"jsmith@payquicker.com"
                + "\",\"gender\":\"FEMALE\",\"userType\":\"INDIVIDUAL\",\"programUserId\":\"d97ce05"
                + "19b2d\",\"language\":\"en-US\",\"countryOfBirth\":\"US\",\"countryOfNationality"
                + "\":\"US\"}",
                UserBase.class);

        // Set callback and perform API call
        UserResponse result = null;
        try {
            result = controller.createUser(xMyPayQuickerVersion, body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 201", 
                201, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"firstName\":\"Jane\",\"lastName\":\"Smith\",\"dateOfBirth\":\"1977-12-14\",\"ph"
                + "oneNumber\":\"760-350-0324\",\"phoneNumberCountry\":\"US\",\"mobileNumber\":\"21"
                + "3-446-5755\",\"mobileNumberCountry\":\"US\",\"addressLine1\":\"290 Carriage Cour"
                + "t\",\"city\":\"Los Angeles\",\"region\":\"CA\",\"country\":\"US\",\"postalCode"
                + "\":\"90017\",\"addressType\":\"RESIDENTIAL\",\"email\":\"jsmith@payquicker.com"
                + "\",\"gender\":\"FEMALE\",\"userType\":\"INDIVIDUAL\",\"programUserId\":\"d97ce05"
                + "19b2d\",\"language\":\"en-US\",\"countryOfBirth\":\"US\",\"countryOfNationality"
                + "\":\"US\",\"token\":\"user-f012bc86-4d42-415b-a8b2-be5e0b90e59a\",\"status\":\"P"
                + "RE_ACTIVATED\",\"createdOn\":\"2020-02-24T22:00:00Z\",\"links\":[{\"params\":{"
                + "\"rel\":\"self\"},\"href\":\"https://platform.mypayquicker.com/api/v2/users/user"
                + "-f012bc86-4d42-415b-a8b2-be5e0b90e59a\"}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * Retrieve a list of IDV checks by user token that supports filtering, sorting, and pagination
     * through existing mechanisms.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestListUserIDVChecks() throws Exception {
        // Parameters for the API call
        String userToken = 
                "user-f012bc86-4d42-415b-a8b2-be5e0b90e59a";
        String xMyPayQuickerVersion = 
                "2020.02.24";

        // Set callback and perform API call
        IdentityVerificationCollectionResponse result = null;
        try {
            result = controller.listUserIDVChecks(userToken, xMyPayQuickerVersion);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"payload\":[{\"idvProviderReference\":\"yPV0h4o1Yw3QzdLAvA7a\",\"idvResult\":\"P"
                + "ASS\",\"idvSubResult\":\"HARD\",\"idvProvider\":\"IDOLOGY\",\"createdOn\":\"2020"
                + "-02-21T22:00:00Z\",\"raw\":\"<RAW IDV processor output, for informational /debug"
                + "ging purposes only>\",\"idvCheckType\":\"NON_DOCUMENTARY\",\"idvDisposition\":"
                + "\"FINAL\",\"token\":\"idvc-7e7567e0-c2db-485d-896d-45901a10baa9\",\"links\":[{"
                + "\"params\":{\"rel\":\"self\"},\"href\":\"https://platform.mypayquicker.com/api/v"
                + "2/users/user-f012bc86-4d42-415b-a8b2-be5e0b90e59a/idv-checks/idvc-7e7567e0-c2db-"
                + "485d-896d-45901a10baa9\"}]}],\"links\":[{\"params\":{\"rel\":\"self\"},\"href\":"
                + "\"https://platform.mypayquicker.com/api/v2/users/user-f012bc86-4d42-415b-a8b2-be"
                + "5e0b90e59a/idv-checks\"}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * Retrieve a list of all IDV check by IDVC token that supports filtering, sorting, and
     * pagination through existing mechanisms.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestRetrieveUserIDVCheck() throws Exception {
        // Parameters for the API call
        String userToken = 
                "user-f012bc86-4d42-415b-a8b2-be5e0b90e59a";
        String idvcToken = 
                "idvc-7e7567e0-c2db-485d-896d-45901a10baa9";
        String xMyPayQuickerVersion = 
                "2020.02.24";

        // Set callback and perform API call
        IdentityVerificationResponse result = null;
        try {
            result = controller.retrieveUserIDVCheck(userToken, idvcToken, xMyPayQuickerVersion);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"idvProviderReference\":\"yPV0h4o1Yw3QzdLAvA7a\",\"idvResult\":\"PASS\",\"idvSub"
                + "Result\":\"HARD\",\"idvProvider\":\"IDOLOGY\",\"createdOn\":\"2020-02-21T22:00:0"
                + "0Z\",\"raw\":\"<RAW IDV processor output, for informational/debugging purposes o"
                + "nly>\",\"idvCheckType\":\"NON_DOCUMENTARY\",\"idvDispostion\":\"FINAL\",\"token"
                + "\":\"idvc-7e7567e0-c2db-485d-896d-45901a10baa9\",\"links\":[{\"params\":{\"rel"
                + "\":\"self\"},\"href\":\"https://platform.mypayquicker.com/api/v2/users/user-f012"
                + "bc86-4d42-415b-a8b2-be5e0b90e59a/idv-checks/idvc-7e7567e0-c2db-485d-896d-45901a1"
                + "0baa9\"}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * Retrieve a list of all user events that supports filtering, sorting, and pagination through
     * existing mechanisms.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestListUserEvents() throws Exception {
        // Parameters for the API call
        String userToken = 
                "user-f012bc86-4d42-415b-a8b2-be5e0b90e59a";

        // Set callback and perform API call
        try {
            controller.listUserEvents(userToken);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

    }

    /**
     * Retrieve a single user event.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestRetrieveUserEvent() throws Exception {
        // Parameters for the API call
        String userToken = 
                "user-f012bc86-4d42-415b-a8b2-be5e0b90e59a";
        String evntToken = 
                "evnt-28491de2-5b22-4e30-028a-45901a10baa9";

        // Set callback and perform API call
        try {
            controller.retrieveUserEvent(userToken, evntToken);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

    }

    /**
     * Accept a single program agreement.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestAcceptProgramAgreement() throws Exception {
        // Parameters for the API call
        String userToken = 
                "user-f012bc86-4d42-415b-a8b2-be5e0b90e59a";
        String agmtToken = 
                "agmt-45901a10-5b22-4e30-028a-45901a10baa9";

        // Set callback and perform API call
        try {
            controller.acceptProgramAgreement(userToken, agmtToken);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

    }

    /**
     * Retrieve a list of all accepted program agreements that supports filtering, sorting, and
     * pagination through existing mechanisms.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestListAcceptedProgramAgreements() throws Exception {
        // Parameters for the API call
        String userToken = 
                "user-f012bc86-4d42-415b-a8b2-be5e0b90e59a";

        // Set callback and perform API call
        try {
            controller.listAcceptedProgramAgreements(userToken);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

    }

}
