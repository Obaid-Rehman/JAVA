/*
 * PQAPIV2Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package build.mypayquicker.platform.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import build.mypayquicker.platform.ApiHelper;
import build.mypayquicker.platform.PQAPIV2Client;
import build.mypayquicker.platform.exceptions.ApiException;
import build.mypayquicker.platform.models.WebhookCollectionResponse;
import build.mypayquicker.platform.models.WebhookSubscription;
import build.mypayquicker.platform.models.WebhookSubscriptionResponse;
import build.mypayquicker.platform.testing.TestHelper;
import java.util.LinkedHashMap;
import java.util.Map;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class WebhooksControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static PQAPIV2Client client;
    
    /**
     * Controller instance (for all tests).
     */
    private static WebhooksController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getWebhooksController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * Retrieve a list of all webhook subscriptions that supports filtering, sorting, and pagination
     * through existing mechanisms.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestListWebhookSubscriptions() throws Exception {
        // Parameters for the API call
        String xMyPayQuickerVersion = 
                "2020.02.24";

        // Set callback and perform API call
        WebhookCollectionResponse result = null;
        try {
            result = controller.listWebhookSubscriptions(xMyPayQuickerVersion);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"links\":[{\"params\":{\"rel\":\"self\"},\"href\":\"string\"}],\"payload\":[{\"l"
                + "inks\":[{\"params\":{\"rel\":\"self\"},\"href\":\"string\"}],\"url\":\"https://w"
                + "ww.example.com/webhooks\",\"namespace\":\"BANKACCOUNTS.UPDATED.STATUS.APPROVED"
                + "\",\"token\":\"webh-2dd54a53-3814-4ce1-862f-dc06b09ead4a\",\"created\":\"2020-01"
                + "-01\",\"lastUpdated\":\"2020-02-01\"}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * Create a webhook subscription for a given URL and namespace. When this event fires, the
     * webhook receives a call from the API.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestCreateWebhookSubscription() throws Exception {
        // Parameters for the API call
        String xMyPayQuickerVersion = 
                "2020.02.24";
        WebhookSubscription body = null;

        // Set callback and perform API call
        WebhookSubscriptionResponse result = null;
        try {
            result = controller.createWebhookSubscription(xMyPayQuickerVersion, body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"links\":[{\"params\":{\"rel\":\"self\"},\"href\":\"string\"}],\"url\":\"https:/"
                + "/www.example.com/webhooks\",\"namespace\":\"BANKACCOUNTS.UPDATED.STATUS.APPROVED"
                + "\",\"token\":\"webh-2dd54a53-3814-4ce1-862f-dc06b09ead4a\",\"created\":\"2020-01"
                + "-01\"}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * Create a webhook subscription for a given URL and namespace. When this event fires, the
     * webhook receives a call from the API.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestCreateWebhookSubscription1() throws Exception {
        // Parameters for the API call
        String xMyPayQuickerVersion = 
                "2020.02.24";
        WebhookSubscription body = null;

        // Set callback and perform API call
        try {
            controller.createWebhookSubscription(xMyPayQuickerVersion, body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 201", 
                201, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

    }

}
